---
description: Before creating/updating ANY .mdc file, when lifecycle rules create architecture files, when epic work creates rule files
alwaysApply: false
---
# File content starts here
```

### **Cursor IDE Critical Requirements**
- ‚úÖ **First Line**: Metadata MUST start on line 1 with `---`
- ‚úÖ **Delimiters**: Exactly 3 dashes, no spaces, no other characters
- ‚úÖ **One Metadata Block**: Only ONE metadata section per file
- ‚úÖ **YAML Format**: Proper YAML syntax within delimiters
- ‚úÖ **Required Fields**: description, globs, alwaysApply
- ‚úÖ **Closing Delimiter**: Second `---` line to close metadata

### **AI Compliance Operations**

#### **CREATE_MDC_FILE**
```
PRECONDITIONS:
  1. Target location: .cursor/rules/rule-framework-v2/[filename].mdc
  2. Metadata header prepared with exact format
  3. Description matches AI Instructions section

EXECUTION_STEPS:
  1. Create file starting with metadata header (line 1)
  2. Add description matching "When to use" from AI Instructions
  3. Set globs: (empty) and alwaysApply: false
  4. Close metadata with second --- line
  5. Add empty line before content
  6. MANDATORY: Add AI CONTEXT DESCRIPTION header with all four fields
  7. Add file content below AI CONTEXT DESCRIPTION header

VALIDATION:
  1. File location correct (.cursor/rules/rule-framework-v2/)
  2. Metadata starts on line 1
  3. Exactly one metadata block
  4. All required fields present
  5. YAML syntax valid
  6. MANDATORY: AI CONTEXT DESCRIPTION header present with all four fields
```

#### **UPDATE_MDC_FILE**
```
PRECONDITIONS:
  1. File exists and metadata identified
  2. Metadata preservation required
  3. Content updates only below second ---

EXECUTION_STEPS:
  1. Read current metadata (lines 1 to second ---)
  2. Preserve ALL metadata exactly as-is
  3. Update ONLY content below second ---
  4. Maintain file structure integrity

FORBIDDEN_ACTIONS:
  - Never modify metadata delimiters
  - Never change metadata fields without explicit requirement
  - Never add content above second ---
  - Never remove metadata section
```

## üìÅ MANDATORY FILE LOCATION (ENFORCED)

### **Cursor Rules Directory** (ONLY LOCATION)
- **Path**: `.cursor/rules/rule-framework-v2/`
- **Enforcement**: ALL .mdc files MUST be in this directory
- **Cursor IDE Requirement**: Rules outside this location are ignored

### **File Location Operations**

#### **VALIDATE_FILE_LOCATION**
```
OPERATION: Check file location compliance
REQUIREMENT: File path MUST start with .cursor/rules/rule-framework-v2/
ERROR_HANDLING: 
  - Incorrect location ‚Üí Move file to correct location
  - Missing directory ‚Üí Create directory structure
  - Duplicate files ‚Üí Consolidate to framework directory
```

#### **CREATE_DIRECTORY_STRUCTURE**
```
OPERATION: Ensure proper directory exists
STRUCTURE: .cursor/rules/rule-framework-v2/[subdirectories as needed]
VALIDATION: Directory exists before file creation
```

## üîÑ AI EXECUTION PROTOCOLS

### **Before ANY MDC File Operation**
- [ ] Verify target location: .cursor/rules/rule-framework-v2/
- [ ] Check existing metadata if updating file
- [ ] Prepare metadata header with exact format
- [ ] Validate AI Instructions section for description

### **During MDC File Creation**
- [ ] Start file with metadata header (line 1)
- [ ] Use exact YAML format for metadata
- [ ] Copy "When to use" text to description field
- [ ] Set globs: (empty) and alwaysApply: false
- [ ] Close with second --- line
- [ ] Add content below metadata only

### **During MDC File Updates**
- [ ] Read and preserve existing metadata exactly
- [ ] Modify ONLY content below second ---
- [ ] Maintain metadata field integrity
- [ ] Validate structure after changes

### **After MDC File Operations**
- [ ] Verify metadata compliance
- [ ] Check file location correctness
- [ ] Validate YAML syntax
- [ ] Confirm Cursor IDE compatibility

## üö® AI CONTEXT DESCRIPTION VALIDATION (MANDATORY)

### **Required AI CONTEXT DESCRIPTION Format**
```markdown
## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Specific triggers for AI to use this file]
**MANDATORY FOR**: [Specific scenarios where this file is required]
**PRIMARY FUNCTION**: [Main purpose and functionality of this file]
**CRITICAL**: [Critical information AI must understand about this file]
```

### **AI CONTEXT DESCRIPTION Validation Checklist**
- [ ] Header starts with exact text: "## ü§ñ AI CONTEXT DESCRIPTION"
- [ ] **WHEN TO USE** field describes specific triggers for AI usage
- [ ] **MANDATORY FOR** field lists required scenarios or conditions
- [ ] **PRIMARY FUNCTION** field describes main purpose and functionality
- [ ] **CRITICAL** field includes essential AI context information
- [ ] All four fields are present and properly formatted
- [ ] Content provides clear guidance for AI decision-making

### **AI CONTEXT DESCRIPTION Content Requirements**
- **WHEN TO USE**: Must describe specific conditions, triggers, or scenarios
- **MANDATORY FOR**: Must list non-optional usage scenarios or requirements
- **PRIMARY FUNCTION**: Must explain the main purpose and core functionality
- **CRITICAL**: Must highlight essential information for proper AI usage

### **Validation Enforcement**
- ‚úÖ **Architecture files**: AI CONTEXT DESCRIPTION mandatory via architecture-lifecycle.mdc
- ‚úÖ **Epic files**: AI CONTEXT DESCRIPTION mandatory via epic-lifecycle-rules.mdc
- ‚úÖ **Rule files**: AI CONTEXT DESCRIPTION mandatory for all new rule creation
- ‚úÖ **Template compliance**: All templates include AI CONTEXT DESCRIPTION structure

## üö® ERROR DETECTION & REPAIR (AUTO-FIX)

### **Metadata Corruption Detection**
```
SYMPTOMS:
  - Missing --- delimiters
  - Metadata not on line 1
  - Invalid YAML syntax
  - Missing required fields

AUTO_REPAIR:
  1. Restore proper --- delimiters
  2. Move metadata to line 1
  3. Fix YAML syntax errors
  4. Add missing required fields
  5. Preserve existing content
```

### **Location Compliance Detection**
```
SYMPTOMS:
  - File outside .cursor/rules/rule-framework-v2/
  - Duplicate files in multiple locations
  - Missing directory structure

AUTO_REPAIR:
  1. Move files to correct location
  2. Remove duplicates after content merge
  3. Create directory structure if missing
```

## üìã MDC METADATA TEMPLATES (COPY EXACT FORMAT)

### **Architecture Rule Template**
```yaml
---
description: [Domain] architecture [purpose] - [specific trigger description]
globs: 
alwaysApply: false
---

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Specific triggers for AI to use this file]
**MANDATORY FOR**: [Specific scenarios where this file is required]
**PRIMARY FUNCTION**: [Main purpose and functionality of this file]
**CRITICAL**: [Critical information AI must understand about this file]
```

### **Epic Lifecycle Rule Template**
```yaml
---
description: Epic [lifecycle operation] with [specific functionality]
globs: 
alwaysApply: false
---

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Specific triggers for AI to use this epic file]
**MANDATORY FOR**: [Specific scenarios where this epic file is required]
**PRIMARY FUNCTION**: [Main purpose and functionality of this epic]
**CRITICAL**: [Critical information AI must understand about this epic]
```

### **Workflow Rule Template**
```yaml
---
description: [Workflow type] automation for [specific purpose]
globs: 
alwaysApply: false
---
```

## üéØ LIFECYCLE RULE INTEGRATION (MANDATORY)

### **Architecture File Creation Compliance**
When architecture-lifecycle.mdc creates files:
- ‚úÖ **MANDATORY**: Use cursor-rules-management.mdc CREATE_MDC_FILE operation
- ‚úÖ **MANDATORY**: Validate metadata compliance before file creation
- ‚úÖ **MANDATORY**: Follow exact template format for architecture rules

### **Epic File Creation Compliance**
When epic-lifecycle-rules.mdc creates files:
- ‚úÖ **MANDATORY**: Use cursor-rules-management.mdc CREATE_MDC_FILE operation
- ‚úÖ **MANDATORY**: Ensure Cursor IDE compatibility
- ‚úÖ **MANDATORY**: Follow exact template format for epic rules

### **Rule Update Compliance**
When any lifecycle rule updates .mdc files:
- ‚úÖ **MANDATORY**: Use cursor-rules-management.mdc UPDATE_MDC_FILE operation
- ‚úÖ **MANDATORY**: Preserve metadata exactly
- ‚úÖ **MANDATORY**: Validate compliance after updates

## üîó FRAMEWORK INTEGRATION POINTS

### **Architecture Lifecycle Integration**
- **File Creation**: All architecture file creation MUST follow cursor-rules-management.mdc
- **Metadata Templates**: Use architecture rule template exactly
- **Compliance Validation**: Execute cursor-rules-management.mdc validation

### **Epic Lifecycle Integration**
- **Rule File Creation**: All epic-related rule creation MUST follow cursor-rules-management.mdc
- **Update Operations**: All epic file updates MUST preserve metadata
- **Error Prevention**: Use cursor-rules-management.mdc error detection

### **User Rules Template Integration**
- **Rule Creation Instructions**: Reference cursor-rules-management.mdc compliance
- **Metadata Requirements**: Emphasize Cursor IDE metadata criticality
- **Error Avoidance**: Include cursor-rules-management.mdc validation steps

## üö® AI COMPLIANCE CHECKLIST (MANDATORY)

### **Before File Creation**
- [ ] Target location verified: .cursor/rules/rule-framework-v2/
- [ ] Metadata template prepared with exact format
- [ ] Description matches AI Instructions section
- [ ] YAML syntax validated

### **During File Creation**
- [ ] Metadata starts on line 1 with ---
- [ ] Required fields present and properly formatted
- [ ] Metadata closed with second --- line
- [ ] AI CONTEXT DESCRIPTION header added with all four fields
- [ ] Content added below AI CONTEXT DESCRIPTION header

### **After File Creation**
- [ ] File location compliance verified
- [ ] Metadata structure validated
- [ ] AI CONTEXT DESCRIPTION header validated (all four fields)
- [ ] Cursor IDE compatibility confirmed
- [ ] Integration with framework verified

---

**AI ENFORCEMENT**: Mandatory compliance for ALL .mdc file operations
**CURSOR IDE REQUIREMENT**: Exact metadata format required for rule functionality
**FRAMEWORK INTEGRATION**: Central compliance for all lifecycle rule operations


---

**This rule was created to prevent repeated mistakes with cursor rules location and format. All requirements must be followed exactly.**
