---
description: Used for when referering to workflow-state, workflow or when doing work on specific epic phase or step
globs: 
alwaysApply: false
---
# Workflow State Management
**Framework Version**: 2.0 - Generic Template
**Last Updated**: 2025-01-27

## Current State
**Phase**: INIT
**Status**: READY
**CurrentItem**: "Ready for first task"
**EpicReference**: null
**EpicPhase**: null
**EpicStep**: null

---

## Detailed Plan
*Detailed implementation plan will be created here during BLUEPRINT phase*

---

## Task Queue
| **ID** | **Task Description** | **Epic Context** | **Status** | **Priority** |
|--------|---------------------|------------------|------------|--------------|
| 1 | Ready for first task | N/A | PENDING | Medium |

---

## Execution Log
*Implementation progress and tool outputs will be logged here during CONSTRUCT phase*

---

## Archive Log
*Rotated log summaries will be stored here when execution log exceeds 5,000 characters*

---

## Usage Examples

### Epic Reference Format
When working on epic-related tasks, the epic context is automatically parsed from natural language:
- **User Input**: "work on user authentication from security epic"
- **Parsed Context**: EpicReference="SECURITY_EPIC", EpicPhase="AUTHENTICATION", EpicStep="USER_LOGIN"

### Workflow Phase Transitions
1. **INIT** → **ANALYZE**: User provides first task description
2. **ANALYZE** → **BLUEPRINT**: Requirements understood, planning begins
3. **BLUEPRINT** → **CONSTRUCT**: Plan approved, implementation starts
4. **CONSTRUCT** → **VALIDATE**: Implementation complete, validation begins
5. **VALIDATE** → **ANALYZE**: Work complete, ready for next task

### Status Indicators
- **READY**: Waiting for user input or next action
- **RUNNING**: Actively processing current phase
- **NEEDS_PLAN_APPROVAL**: Blueprint complete, awaiting user confirmation
- **COMPLETED**: Current task finished successfully
- **BLOCKED**: Cannot proceed due to dependencies or issues

---

**File Purpose**: Mutable workspace for current workflow state and progress tracking  
**Framework Integration**: Managed by workflow-lifecycle-rules.mdc automation  
**Epic Integration**: Automatic epic context parsing and progress updates
