---
description: Navigate core architectural components - patterns, maintenance rules, and foundational concepts required by all development
alwaysApply: false
---
# Core Architecture Index
**🔍 Fast Lookup - Core Domain Files**

## 🤖 AI CONTEXT DESCRIPTION
**WHEN TO USE**: Navigate core architectural components - patterns, maintenance rules, and foundational concepts required by all development
**MANDATORY FOR**: All development work, core pattern application, and foundational architecture compliance
**PRIMARY FUNCTION**: Provide database-style index for core architecture patterns required by all domains
**CRITICAL**: Essential patterns that form the foundation for all other architectural domains and development work

## 📊 CORE FILE INDEX

### 🚨 **MANDATORY PATTERNS** (Apply to ALL Development)
| **File** | **When to Use** | **Line Count** | **Contains** |
|----|-----|----|----- |
| `patterns.mdc` | ALL development work | 485 lines | Dual User ID System, Organization Access Control, Database patterns |
| `maintenance.mdc` | Architecture file creation/modification | 279 lines | File size limits, metadata requirements, quality gates |

## ⚡ **QUICK DECISION PATHS**

```
🎯 WHAT ARE YOU BUILDING?

NEW FEATURE:
├─ patterns.mdc (Dual User ID + Organization Access)
└─ maintenance.mdc (if creating architecture docs)

API DEVELOPMENT:
├─ patterns.mdc (Database patterns + User ID system)
└─ maintenance.mdc (architecture compliance)

AUTHENTICATION/AUTHORIZATION:
├─ patterns.mdc (Organization Access Control)
└─ ../backend/security/index.mdc (specific implementation)

ARCHITECTURE DOCUMENTATION:
└─ maintenance.mdc (file standards + quality gates)
```

## 🔗 **PATTERN DEPENDENCIES**

**Dual User ID System**: Required by frontend auth + backend APIs  
**Organization Access Control**: Required by ALL multi-tenant features  
**Database Patterns**: Required by ALL backend data operations  
**Maintenance Rules**: Required by ALL architecture documentation  

## 📋 **CORE COMPLIANCE CHECKLIST**

✅ Apply Dual User ID System (internal UUID + Clerk ID)  
✅ Implement Organization Access Control for all features  
✅ Follow Database patterns for schema design  
✅ Maintain architecture file standards  

---

**Domain**: Core (Foundational Patterns)  
**Files**: 2 mandatory pattern files  
**Purpose**: Essential cross-domain architecture patterns
