---
description: Automated validation and consistency checks to ensure epic lifecycle management follows established patterns and prevents data inconsistencies across epic files.
globs: 
alwaysApply: false
---
# Epic Validation & Automation Rules
**Last Updated**: 2025-01-27
**Framework Version**: 1.1 - High Reliability & Data Integrity

## Purpose
Automated validation and consistency checks to ensure epic lifecycle management follows established patterns and prevents data inconsistencies across epic files.

## üîÑ Automatic Validation Triggers

### **RULE_EPIC_COMPLETION_VALIDATION** (Always Applied)
**Trigger**: When epic marked as COMPLETED in changelog or workflow state
**Actions Required**:
1. **Status Verification**: Verify epic status is COMPLETED across all files
2. **File Migration**: Move epic from `epic-active.mdc` to `epic-completed.mdc`
3. **Registry Update**: Update epic status to COMPLETED in `epic-registry.mdc`
4. **Portfolio Counts**: Update active/completed counters in registry and active files
5. **Workflow Cleanup**: Clear epic references from `workflow-state.mdc`

**Validation Checks**:
- ‚úÖ Epic exists in `epic-completed.mdc`
- ‚úÖ Epic removed from `epic-active.mdc`
- ‚úÖ Registry status shows COMPLETED
- ‚úÖ Portfolio counts are accurate
- ‚úÖ Workflow state cleared

### **RULE_EPIC_LIFECYCLE_CONSISTENCY** (Always Applied)
**Trigger**: Any epic status change or file modification
**Actions Required**:
1. **Cross-File Validation**: Ensure epic status consistent across all files
2. **Location Validation**: Verify epic is in correct lifecycle file
3. **Registry Synchronization**: Sync epic metadata in registry
4. **Dependency Validation**: Check epic dependencies are satisfied
5. **Architecture Integration**: Verify architecture impact preservation

**Validation Checks**:
- ‚úÖ Epic status matches across registry, active/planned/completed files
- ‚úÖ Epic location matches status (ACTIVE in active, COMPLETED in completed)
- ‚úÖ Registry metadata is accurate and up-to-date
- ‚úÖ Epic dependencies properly resolved
- ‚úÖ Architecture impact documented and preserved

### **RULE_EPIC_PORTFOLIO_LIMITS** (Always Applied)
**Trigger**: Epic activation or status change
**Actions Required**:
1. **Active Count Enforcement**: Ensure maximum 3 active epics
2. **Capacity Management**: Block activation if capacity exceeded
3. **Auto-Activation**: Activate next planned epic when capacity available
4. **Performance Monitoring**: Track AI context optimization

**Validation Checks**:
- ‚úÖ Active epic count ‚â§ 3
- ‚úÖ Portfolio counts accurate across all files
- ‚úÖ Next epic activation ready when capacity available
- ‚úÖ Performance metrics within acceptable range

## üõ†Ô∏è Manual Validation Protocol

### **Epic Completion Checklist**
When completing any epic, AI must verify:

```yaml
Epic Completion Validation:
  - [ ] Epic marked COMPLETED in project-config.mdc changelog
  - [ ] Epic status COMPLETED in workflow-state.mdc
  - [ ] Epic moved from epic-active.mdc to epic-completed.mdc
  - [ ] Registry status updated to COMPLETED
  - [ ] Portfolio counts updated (active -1, completed +1)
  - [ ] Architecture contributions documented
  - [ ] Workflow state cleared of epic references
  - [ ] Success criteria and lessons learned captured
```

### **Cross-File Consistency Check**
Regular validation of epic data integrity:

```yaml
Consistency Validation:
  Registry File:
    - [ ] All epic statuses match detail files
    - [ ] Portfolio counts accurate
    - [ ] Location file references correct
    - [ ] Dependencies properly tracked
  
  Active Epics:
    - [ ] All epics show ACTIVE status
    - [ ] Maximum 3 epics enforced
    - [ ] All phases and steps detailed
    - [ ] Architecture impact specified
  
  Completed Epics:
    - [ ] All epics show COMPLETED status
    - [ ] Success criteria documented
    - [ ] Lessons learned captured
    - [ ] Architecture contributions preserved
  
  Planned Epics:
    - [ ] All epics show PLANNED status
    - [ ] Dependencies clearly stated
    - [ ] Ready for activation
    - [ ] Architecture alignment verified
```

## üö® Error Detection & Recovery

### **Automatic Error Detection**
System automatically detects:
- **Status Mismatches**: Epic status different across files
- **Location Errors**: Epic in wrong lifecycle file for its status
- **Count Inconsistencies**: Portfolio counts don't match actual epic distribution
- **Missing Architecture**: Epic steps without architecture impact
- **Broken Dependencies**: Epic dependencies not properly resolved

### **Recovery Procedures**
When inconsistencies detected:

**Minor Inconsistencies** (Auto-Fix):
- Status synchronization across files
- Portfolio count corrections
- Location file reference updates
- Metadata consistency repairs

**Major Inconsistencies** (Manual Intervention):
- Epic data corruption or loss
- Multiple versions of same epic
- Critical workflow state errors
- Architecture integration failures

**Recovery Protocol**:
1. **Backup Current State**: Preserve all files before changes
2. **Identify Root Cause**: Determine source of inconsistency
3. **Apply Minimal Fix**: Make smallest change to restore consistency
4. **Validate Result**: Confirm all validation checks pass
5. **Document Issue**: Log the problem and resolution for future prevention

## üîß Implementation Guidelines

### **For AI Assistants**
When working with epics:

1. **Always Check Status First**: Verify current epic status across all files
2. **Follow Completion Protocol**: Use established epic completion process
3. **Validate Before Proceeding**: Run consistency checks before making changes
4. **Document Changes**: Log all epic status modifications
5. **Preserve Architecture**: Maintain architecture integration throughout lifecycle

### **For Users**
When requesting epic work:

1. **Reference Current Status**: Check epic registry for current status
2. **Understand Dependencies**: Verify prerequisite epics are completed
3. **Respect Capacity Limits**: Don't request activation beyond 3 active epics
4. **Validate Results**: Confirm epic lifecycle changes are properly applied

## üìä Validation Metrics

### **System Health Indicators**
- **Cross-File Consistency**: 100% status alignment across files
- **Portfolio Accuracy**: Active/completed counts match actual distribution
- **Architecture Integration**: All epic steps have architecture impact documented
- **Dependency Resolution**: All epic dependencies properly tracked and satisfied

### **Performance Metrics**
- **Epic Completion Time**: Average time from start to completion
- **Validation Success Rate**: Percentage of epic transitions without errors
- **Architecture Updates**: Number of architecture contributions per epic
- **System Reliability**: Uptime and consistency of epic lifecycle management

## üéØ Success Criteria

This validation system is successful when:
- ‚úÖ **Zero Inconsistencies**: All epic data consistent across files
- ‚úÖ **Automated Reliability**: Epic lifecycle transitions work automatically
- ‚úÖ **Architecture Preservation**: All architecture impacts properly documented
- ‚úÖ **Performance Optimization**: 3-epic limit maintains optimal AI performance
- ‚úÖ **User Confidence**: Users can trust epic status information is accurate

---

## üöÄ Next Steps for Enhanced Reliability

1. **Real-Time Monitoring**: Implement continuous validation checking
2. **Automated Testing**: Create test suite for epic lifecycle operations
3. **Performance Analytics**: Track epic completion patterns and optimization
4. **Advanced Automation**: Enhance auto-activation and dependency resolution
5. **Integration Monitoring**: Validate architecture and workflow integration health

---

**This automation framework ensures epic lifecycle management maintains the highest standards of reliability, consistency, and performance while preserving all architecture and workflow integration capabilities.**
