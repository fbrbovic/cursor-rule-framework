---
description: Epic lifecycle operations with mandatory cursor-rules-management compliance and integrated step stages.
globs: 
alwaysApply: false
---

# Epic Lifecycle Management Framework v3.0
**Last Updated**: 2025-01-27
**Version**: 3.0 - Optimized with Integrated Validation & Architecture Rules

## Framework Purpose
Streamlined epic management with individual epic files, integrated step stages (BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE), validation rules, and architecture integration for AI operation.

## üö® MANDATORY CURSOR-RULES-MANAGEMENT COMPLIANCE

### **CRITICAL REQUIREMENT: ALL Epic File Operations MUST Follow cursor-rules-management.mdc**
- ‚úÖ **BEFORE ANY EPIC FILE OPERATION**: Execute cursor-rules-management.mdc compliance procedures
- ‚úÖ **EPIC FILE CREATION**: Use cursor-rules-management.mdc CREATE_MDC_FILE operation exclusively
- ‚úÖ **EPIC FILE UPDATES**: Use cursor-rules-management.mdc UPDATE_MDC_FILE operation exclusively
- ‚úÖ **METADATA REQUIREMENTS**: Follow cursor-rules-management.mdc epic lifecycle rule template exactly
- ‚úÖ **CURSOR IDE COMPATIBILITY**: Ensure metadata starts line 1, proper --- delimiters, YAML format

### **Epic File Operations Integration**
- **Individual Epic Creation** ‚Üí **MANDATORY**: cursor-rules-management.mdc CREATE_MDC_FILE
- **Epic Progress Updates** ‚Üí **MANDATORY**: cursor-rules-management.mdc UPDATE_MDC_FILE (content only below ---)
- **Epic Registry Updates** ‚Üí **MANDATORY**: cursor-rules-management.mdc UPDATE_MDC_FILE (preserve metadata)
- **Rule File Creation** ‚Üí **MANDATORY**: cursor-rules-management.mdc CREATE_MDC_FILE

### **MANDATORY AI CONTEXT DESCRIPTION Header** (NEW REQUIREMENT)
**ALL EPIC FILES MUST INCLUDE**:
```markdown
## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Specific triggers for AI to use this epic file]
**MANDATORY FOR**: [Specific scenarios where this epic file is required]
**PRIMARY FUNCTION**: [Main purpose and functionality of this epic]
**CRITICAL**: [Critical information AI must understand about this epic]
```
**ENFORCEMENT**: Epic file creation and updates MUST validate AI CONTEXT DESCRIPTION header presence

### **Epic-Specific Compliance Requirements**
- **Epic File Location**: MUST be .cursor/rules/rule-framework-v2/epics/[EPIC_NAME].mdc
- **Epic Registry Location**: MUST be .cursor/rules/rule-framework-v2/epic-registry.mdc
- **Metadata Template**: Use cursor-rules-management.mdc epic lifecycle rule template
- **AI CONTEXT DESCRIPTION**: MANDATORY header with all four fields for every epic file
- **Update Zones**: Only update designated AI UPDATE ZONES, preserve all other content

### **Zero Tolerance Policy for Epic Files**
- **Epic file operations without cursor-rules-management.mdc compliance are FORBIDDEN**
- **Cursor IDE requirements are NON-NEGOTIABLE** (metadata format, file location)
- **Epic file corruption prevention through mandatory compliance**
- **Architecture trigger integration MUST follow cursor-rules-management.mdc standards**

## üèóÔ∏è Epic Storage Architecture

### **Individual Epic Files** (PRIMARY STORAGE)
- **Location**: `/.cursor/rules/rule-framework-v2/epics/`
- **Format**: `EPIC_NAME.mdc` (e.g., `USER_AUTHENTICATION_SYSTEM.mdc`)
- **AI Optimization**: Status updates only at designated table locations

### **Epic Registry** (MASTER INDEX)
- **File**: `.cursor/rules/rule-framework-v2/epic-registry.mdc`
- **Purpose**: Fast lookup index with status and progress tracking
- **Content**: Epic list, current phase/step, completion percentage, dependencies

## üéØ Epic File Structure (MANDATORY FORMAT)

### **Epic File Template** (EXACT FORMAT REQUIRED)
```markdown
---
description: [EPIC_NAME] epic tracking and management
globs: 
alwaysApply: false
---
# EPIC: [EPIC_NAME]

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [When working on this specific epic]
**MANDATORY FOR**: [Epic progress updates, step stage execution, specific requirements]
**PRIMARY FUNCTION**: [Main purpose and functionality of this epic]
**CRITICAL**: [Critical information AI must understand about this epic]

## üìä EPIC PROGRESS TABLE (AI UPDATE ZONE)
| Phase | Step | Stage | Status | Progress | Next Action |
|-------|------|-------|--------|----------|-------------|
| Phase1 | Step1 | BLUEPRINT | ACTIVE | 25% | Requirements analysis |
| Phase1 | Step2 | PLANNED | PENDING | 0% | Awaiting Step1 completion |

## üìã EPIC METADATA
- **Status**: ACTIVE | PLANNED | COMPLETED | PAUSED | BLOCKED
- **Priority**: High | Medium | Low | Critical
- **Dependencies**: [List of dependent epics or external requirements]
- **Architecture Domains**: [Backend, Frontend, Database, etc.]

## üéØ EPIC GOALS & SUCCESS CRITERIA
### Goal: [Clear epic objective and business value]
### Success Criteria
- [ ] Criterion 1 with measurable outcome
- [ ] Criterion 2 with acceptance criteria

## üèóÔ∏è EPIC PHASES AND STEPS

### PHASE 1: [PHASE_NAME]
#### STEP 1.1: [STEP_NAME]
**Requirements** (100% COMPLIANCE MANDATORY):
- Requirement 1: [Specific, measurable requirement]
- Requirement 2: [Technical specification]

**Acceptance Criteria**:
- [ ] Criterion 1 with validation method
- [ ] Criterion 2 with test requirements

**Architecture Impact**: 
- File: `architecture/[domain]/[file].mdc`
- Changes: [Specific architectural changes required]

**Dependencies**: [Other steps or external requirements]

#### STEP STAGES EXECUTION:
**üîµ BLUEPRINT STAGE**
- [ ] Architecture consultation completed (MANDATORY)
- [ ] Existing codebase analyzed 
- [ ] Research solutions completed
- [ ] Detailed plan created and approved

**üü° CONSTRUCT STAGE** 
- [ ] Implementation following approved plan
- [ ] Tests written and passing
- [ ] Architecture rules updated

**üü¢ VALIDATE STAGE**
- [ ] Full validation completed
- [ ] Epic progress updated
```

## üîÑ Epic Lifecycle States

### **Epic Status Values**
- **PLANNED**: Epic designed but not started
- **ACTIVE**: Epic currently being worked on (max 3 active epics)
- **COMPLETED**: Epic finished successfully
- **BLOCKED**: Epic waiting for dependencies

### **Step Stage Values**
- **PLANNED**: Step not yet started
- **BLUEPRINT**: Planning and architecture validation stage
- **CONSTRUCT**: Implementation stage  
- **VALIDATE**: Testing and completion stage
- **COMPLETED**: Step finished successfully

## ü§ñ AI Update Rules (STRICTLY ENFORCED)

### **Epic Progress Updates** (ONLY IN DESIGNATED AREAS)
**üéØ UPDATE ZONES**:
1. **Epic Registry Table**: `epic-registry.mdc` ‚Üí `## üìä EPIC REGISTRY TABLE`
2. **Epic Progress Table**: `epics/[EPIC_NAME].mdc` ‚Üí `## üìä EPIC PROGRESS TABLE`
3. **Step Stage Checkboxes**: Individual step stage checklists

### **Forbidden Update Areas** (AI MUST NEVER MODIFY)
- ‚ùå Epic goals and success criteria
- ‚ùå Requirements and acceptance criteria
- ‚ùå Architecture impact specifications
- ‚ùå File structure or metadata headers

## üîÑ Step Stage Workflow with Integrated Validation

### **BLUEPRINT STAGE** (Planning & Architecture Validation)
**Required Actions**:
1. **Architecture Consultation** (MANDATORY - AUTO-TRIGGER):
   - Execute TRIGGER_EPIC_BLUEPRINT_STAGE from `architecture-lifecycle.mdc`
   - Read `architecture/core/patterns.mdc` for mandatory patterns
   - Consult relevant domain-specific architecture files
   - Review `architecture/decisions/` for contextual ADRs
   - Document architecture consultation in step stage checkboxes
2. **Epic Context Integration**:
   - Validate against epic requirements and acceptance criteria
   - Check dependencies and blockers
3. **Detailed Planning**:
   - Create step-by-step implementation plan
   - Identify architecture changes needed (documented via architecture-lifecycle.mdc)
4. **MANDATORY cursor-rules-management.mdc Compliance**:
   - If creating new rule files: Execute cursor-rules-management.mdc CREATE_MDC_FILE
   - If updating epic files: Execute cursor-rules-management.mdc UPDATE_MDC_FILE
   - Validate Cursor IDE metadata requirements
5. **Approval Gate**: Request user confirmation before proceeding

**Completion Criteria & Validation**:
- [ ] Architecture consultation completed and documented (TRIGGER_EPIC_BLUEPRINT_STAGE executed)
- [ ] Epic progress table updated to BLUEPRINT stage
- [ ] Epic registry synchronized with step status
- [ ] User approval obtained

### **CONSTRUCT STAGE** (Implementation)
**Required Actions**:
1. **Plan Adherence**: Follow approved blueprint exactly
2. **Implementation**: Make atomic, testable changes with immediate test validation
3. **Architecture Updates** (MANDATORY - AUTO-TRIGGER):
   - Execute TRIGGER_EPIC_CONSTRUCT_STAGE from `architecture-lifecycle.mdc`
   - ALL architecture file operations MUST use cursor-rules-management.mdc procedures
   - Update architecture files following architecture-lifecycle.mdc standards
   - Maintain file size limits and metadata compliance
   - Update domain indexes when new files created
4. **MANDATORY cursor-rules-management.mdc Compliance**:
   - All .mdc file updates MUST use cursor-rules-management.mdc UPDATE_MDC_FILE
   - Preserve metadata headers exactly as specified
   - Validate Cursor IDE compatibility after updates
5. **Progress Tracking**: Update epic progress table regularly

**Completion Criteria & Validation**:
- [ ] All planned implementation completed
- [ ] Tests written and passing
- [ ] Architecture documentation updated (TRIGGER_EPIC_CONSTRUCT_STAGE executed)
- [ ] Epic progress table updated to CONSTRUCT stage
- [ ] Epic registry synchronized

### **VALIDATE STAGE** (Completion & Final Validation)
**Required Actions**:
1. **Quality Validation**: Run full test suite and verify acceptance criteria
2. **Architecture Compliance** (MANDATORY - AUTO-TRIGGER):
   - Execute TRIGGER_EPIC_VALIDATE_STAGE from `architecture-lifecycle.mdc`
   - ALL architecture validations MUST follow cursor-rules-management.mdc standards
   - Verify all architecture changes documented correctly
   - Validate file size compliance and cross-reference integrity
   - Confirm architecture impact documented in epic step
3. **MANDATORY cursor-rules-management.mdc Validation**:
   - Execute cursor-rules-management.mdc validation checklist
   - Verify all .mdc files maintain proper metadata headers
   - Confirm Cursor IDE compatibility for all updated files
4. **Epic Progress Updates**: Update both epic progress table and registry
5. **Step Completion**: Advance to next step or complete epic

**Completion Criteria & Validation**:
- [ ] All acceptance criteria validated
- [ ] Architecture compliance verified (TRIGGER_EPIC_VALIDATE_STAGE executed)
- [ ] Epic progress updated to reflect completion
- [ ] Epic registry synchronized with new progress percentage
- [ ] Next step prepared or epic marked COMPLETED

## üö® Automatic Validation Rules

### **RULE_EPIC_STEP_COMPLETION** (Always Applied)
**Trigger**: When epic step marked as COMPLETED
**Validation Checks**:
- ‚úÖ Step stages completed in sequence (BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE)
- ‚úÖ Epic progress table updated with completion percentage
- ‚úÖ Epic registry synchronized with step status
- ‚úÖ Architecture documentation updated (TRIGGER_EPIC_STEP_COMPLETION executed from architecture-lifecycle.mdc)

### **RULE_EPIC_AI_CONTEXT_VALIDATION** (Always Applied - NEW)
**Trigger**: Epic file creation or modification
**Validation Checks**:
- ‚úÖ AI CONTEXT DESCRIPTION header present with all four required fields
- ‚úÖ WHEN TO USE field describes specific triggers for AI usage
- ‚úÖ MANDATORY FOR field lists required scenarios
- ‚úÖ PRIMARY FUNCTION field describes main purpose
- ‚úÖ CRITICAL field includes essential AI context information

### **RULE_EPIC_REGISTRY_SYNC** (Always Applied)
**Trigger**: Any epic status or progress update
**Validation Checks**:
- ‚úÖ Epic file status matches registry entry
- ‚úÖ Progress percentages calculated correctly from completed steps
- ‚úÖ Registry table reflects current phase/step information

### **RULE_EPIC_PORTFOLIO_LIMITS** (Always Applied)
**Trigger**: Epic activation request
**Validation Checks**:
- ‚úÖ Maximum 3 active epics enforced in registry
- ‚úÖ Epic dependencies satisfied before activation

### **RULE_ARCHITECTURE_COMPLIANCE** (Always Applied)
**Trigger**: BLUEPRINT stage completion and throughout epic stages
**Validation Checks**:
- ‚úÖ Architecture consultation completed during BLUEPRINT (via architecture-lifecycle.mdc triggers)
- ‚úÖ Core patterns (`architecture/core/patterns.mdc`) referenced
- ‚úÖ Architecture impact documented for step
- ‚úÖ Architecture files updated during CONSTRUCT stage (via architecture-lifecycle.mdc)
- ‚úÖ Architecture compliance verified during VALIDATE stage (via architecture-lifecycle.mdc)

## üîó Architecture Integration Requirements

### **BLUEPRINT Stage Architecture Checklist** (MANDATORY)
```markdown
### Architecture Consultation Checklist
- [ ] **Core Patterns**: Validated against architecture/core/patterns.mdc
- [ ] **Domain Guidelines**: Read relevant domain-specific architecture files
- [ ] **Decision Context**: Reviewed architecture/decisions/ for relevant ADRs
- [ ] **Pattern Adherence**: Step implementation follows established patterns
- [ ] **Architecture Updates**: Planned architecture file updates if needed
```

### **Architecture References by Epic Step Type**
- **Technology-Specific Steps**: `architecture/core/patterns.mdc` + domain-specific files
- **Cross-Domain Steps**: `architecture/core/patterns.mdc` + multiple domain files
- **Infrastructure Steps**: `architecture/core/patterns.mdc` + infrastructure docs

## üéØ Epic Management Operations

### **Creating New Epic**
1. Create file: `epics/[EPIC_NAME].mdc` using mandatory template
2. Update epic registry with new entry
3. Set status to PLANNED

### **Starting Epic Work**
1. Change status to ACTIVE in registry (verify ‚â§3 active epics)
2. Update progress table with first step BLUEPRINT
3. Begin BLUEPRINT stage with architecture consultation

### **Epic Step Completion**
1. Complete VALIDATE stage validation checks
2. Update epic progress table and registry simultaneously
3. Advance to next step or complete epic

### **Error Detection & Recovery**
**Auto-Fix**: Status sync between epic file and registry, progress percentage recalculation
**Manual Intervention**: Epic file corruption, multiple conflicting entries, architecture compliance failures

## üìä Registry Management Rules

### **Epic Registry Updates** (AUTOMATIC)
Update registry when:
- Epic status changes
- Step progress changes  
- Progress percentage changes
- Epic blocking/unblocking occurs

### **Registry Table Format** (MANDATORY)
```markdown
| Epic Name | Status | Priority | Current Phase | Current Step | Progress | Next Action |
|-----------|--------|----------|---------------|--------------|----------|-------------|
| USER_AUTH_SYSTEM | ACTIVE | High | Phase1 | Step1.2 | 35% | API implementation |
```

## üö® Compliance Rules (STRICTLY ENFORCED)

### **Epic File Compliance**
- ‚úÖ Must use exact template format
- ‚úÖ Progress table at top of file
- ‚úÖ Step stages follow BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE sequence
- ‚úÖ Architecture impact specified for every step

### **Step Stage Compliance**
- ‚úÖ Must complete stages in order without skipping
- ‚úÖ Architecture consultation mandatory in BLUEPRINT stage
- ‚úÖ User approval required before CONSTRUCT stage
- ‚úÖ Quality validation required before step completion

---

**Framework Advantages**:
- ‚úÖ **Integrated Validation**: Built-in validation rules for consistency
- ‚úÖ **Architecture Integration**: Mandatory architecture consultation
- ‚úÖ **Optimized AI Updates**: Clear update zones with automatic synchronization
- ‚úÖ **Portfolio Management**: Active epic limits and dependency tracking
- ‚úÖ **Quality Control**: Step-by-step validation and compliance enforcement


**This enhanced framework provides a bulletproof, scalable foundation for epic management that preserves and enhances all existing capabilities while adding enterprise-grade reliability and unlimited scalability.**

**END OF COMPATIBILITY VALIDATION**


**This enhanced framework provides a bulletproof, scalable foundation for epic management that preserves and enhances all existing capabilities while adding enterprise-grade reliability and unlimited scalability.**

**END OF COMPATIBILITY VALIDATION**


**This enhanced framework provides a bulletproof, scalable foundation for epic management that preserves and enhances all existing capabilities while adding enterprise-grade reliability and unlimited scalability.**

**END OF COMPATIBILITY VALIDATION**


**This enhanced framework provides a bulletproof, scalable foundation for epic management that preserves and enhances all existing capabilities while adding enterprise-grade reliability and unlimited scalability.**

**END OF COMPATIBILITY VALIDATION**
