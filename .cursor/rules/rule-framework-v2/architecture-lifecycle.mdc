---
description: Before ANY architecture file creation/modification, during epic BLUEPRINT stages, when implementing architectural changes
alwaysApply: false
---

# Architecture Lifecycle Framework - AI Operations v3.0

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: Before ANY architecture file creation/modification, during epic BLUEPRINT stages, when implementing architectural changes
**MANDATORY TRIGGERS**: Epic step BLUEPRINT stage, CONSTRUCT stage architecture updates, VALIDATE stage compliance checks
**PRIMARY FUNCTION**: Enforce architecture standards, file organization, epic integration compliance
**INTEGRATION**: Automatic execution during epic lifecycle stages via epic-lifecycle-rules.mdc

## üö® MANDATORY CURSOR-RULES-MANAGEMENT COMPLIANCE

### **CRITICAL REQUIREMENT: ALL MDC File Operations MUST Follow cursor-rules-management.mdc**
- ‚úÖ **BEFORE ANY FILE OPERATION**: Execute cursor-rules-management.mdc compliance procedures
- ‚úÖ **FILE CREATION**: Use cursor-rules-management.mdc CREATE_MDC_FILE operation exclusively
- ‚úÖ **FILE UPDATES**: Use cursor-rules-management.mdc UPDATE_MDC_FILE operation exclusively  
- ‚úÖ **METADATA REQUIREMENTS**: Follow cursor-rules-management.mdc metadata templates exactly
- ‚úÖ **CURSOR IDE COMPATIBILITY**: Ensure metadata starts line 1, proper --- delimiters, YAML format

### **Integration Points with cursor-rules-management.mdc**
- **CREATE_ARCHITECTURE_FILE** ‚Üí **MANDATORY**: cursor-rules-management.mdc CREATE_MDC_FILE
- **UPDATE_ARCHITECTURE_FILE** ‚Üí **MANDATORY**: cursor-rules-management.mdc UPDATE_MDC_FILE  
- **VALIDATE_ARCHITECTURE_COMPLIANCE** ‚Üí **MANDATORY**: cursor-rules-management.mdc validation checklist
- **ERROR_HANDLING** ‚Üí **MANDATORY**: cursor-rules-management.mdc auto-repair procedures

### **Zero Tolerance Policy**
- **MDC file operations without cursor-rules-management.mdc compliance are FORBIDDEN**
- **Cursor IDE requirements are NON-NEGOTIABLE** (metadata format, file location)
- **Architecture file corruption prevention through mandatory compliance**

## üö® MANDATORY AI TRIGGERS (AUTO-EXECUTE)

### **TRIGGER_EPIC_BLUEPRINT_STAGE** (ALWAYS EXECUTE)
```
CONDITION: Epic step enters BLUEPRINT stage
OPERATION: Architecture consultation mandatory
LOCATION: Current epic file step stage checklist
REQUIRED_ACTIONS:
  1. Read architecture/core/patterns.mdc (MANDATORY)
  2. Consult domain-specific architecture files based on epic step scope
  3. Review architecture/decisions/ for relevant ADRs
  4. Document architecture consultation in epic step stage checkboxes
  5. Identify architecture changes needed for step implementation
STATUS: Update epic progress table - BLUEPRINT stage architecture consultation complete
```

### **TRIGGER_EPIC_CONSTRUCT_STAGE** (ALWAYS EXECUTE)
```
CONDITION: Epic step in CONSTRUCT stage AND architectural changes planned
OPERATION: Update architecture files during implementation
LOCATION: Architecture domain files specified in epic step
REQUIRED_ACTIONS:
  1. Update relevant architecture domain files with new patterns/decisions
  2. Follow file size limits (500 lines max, 300 for indexes)
  3. Include proper metadata headers in any new architecture files
  4. Update domain index files if new files created
  5. Maintain cross-reference integrity
STATUS: Update epic progress table - CONSTRUCT stage architecture updates complete
```

### **TRIGGER_EPIC_VALIDATE_STAGE** (ALWAYS EXECUTE)
```
CONDITION: Epic step enters VALIDATE stage
OPERATION: Verify architecture compliance and documentation
LOCATION: Architecture files and epic step documentation
REQUIRED_ACTIONS:
  1. Verify all architecture changes documented correctly
  2. Validate file size compliance (‚â§500 lines)
  3. Check cross-reference integrity
  4. Confirm architecture impact documented in epic step
  5. Update architecture changelog if needed
STATUS: Update epic progress table - VALIDATE stage architecture compliance verified
```

### **TRIGGER_EPIC_STEP_COMPLETION** (ALWAYS EXECUTE)
```
CONDITION: Epic step marked COMPLETED
OPERATION: Archive architecture changes and update documentation
LOCATION: Architecture domain files and epic registry
REQUIRED_ACTIONS:
  1. Finalize all architecture file updates from step
  2. Update architecture domain indexes with any new files
  3. Document architectural evolution in architecture/decisions/
  4. Verify epic step architecture impact is accurately documented
  5. Prepare architecture context for next epic step
STATUS: Update epic registry - Architecture changes documented for completed step
```

## üìÅ AI NAVIGATION MAP (FAST LOOKUP)

### **Domain Routing Table**
```
CORE_PATTERNS ‚Üí architecture/core/patterns.mdc
DECISIONS ‚Üí architecture/decisions/index.mdc
WORKFLOWS ‚Üí architecture/workflows/index.mdc

FRONTEND ‚Üí architecture/frontend/index.mdc
BACKEND ‚Üí architecture/backend/index.mdc
MOBILE ‚Üí architecture/mobile/index.mdc
DESKTOP ‚Üí architecture/desktop/index.mdc
DATABASE ‚Üí architecture/database/index.mdc
API_SERVICES ‚Üí architecture/api/index.mdc

INFRASTRUCTURE ‚Üí architecture/infrastructure/index.mdc
DEVOPS ‚Üí architecture/infrastructure/devops.mdc
SECURITY ‚Üí architecture/security/index.mdc
INTEGRATION ‚Üí architecture/integration/index.mdc
TESTING ‚Üí architecture/testing/index.mdc
PERFORMANCE ‚Üí architecture/performance/index.mdc
MONITORING ‚Üí architecture/monitoring/index.mdc
ANALYTICS ‚Üí architecture/analytics/index.mdc
```

### **File Creation Decision Tree**
```
NEW_ARCHITECTURE_FILE_NEEDED?
‚îú‚îÄ PLATFORM SPECIFIC
‚îÇ   ‚îú‚îÄ Web frontend ‚Üí architecture/frontend/[category].mdc
‚îÇ   ‚îú‚îÄ Server backend ‚Üí architecture/backend/[category].mdc
‚îÇ   ‚îú‚îÄ Mobile app ‚Üí architecture/mobile/[platform].mdc
‚îÇ   ‚îî‚îÄ Desktop app ‚Üí architecture/desktop/[platform].mdc
‚îú‚îÄ DATA & SERVICES
‚îÇ   ‚îú‚îÄ Database work ‚Üí architecture/database/[db-type].mdc
‚îÇ   ‚îú‚îÄ API design ‚Üí architecture/api/[service-type].mdc
‚îÇ   ‚îî‚îÄ Integration ‚Üí architecture/integration/[system].mdc
‚îú‚îÄ OPERATIONS & QUALITY
‚îÇ   ‚îú‚îÄ Infrastructure ‚Üí architecture/infrastructure/[component].mdc
‚îÇ   ‚îú‚îÄ Security ‚Üí architecture/security/[domain].mdc
‚îÇ   ‚îú‚îÄ Testing ‚Üí architecture/testing/[test-type].mdc
‚îÇ   ‚îú‚îÄ Performance ‚Üí architecture/performance/[optimization].mdc
‚îÇ   ‚îî‚îÄ Monitoring ‚Üí architecture/monitoring/[metrics].mdc
‚îú‚îÄ CROSS-CUTTING
‚îÇ   ‚îú‚îÄ Core pattern ‚Üí architecture/core/[topic].mdc
‚îÇ   ‚îú‚îÄ Major decision ‚Üí architecture/decisions/[topic]-decisions.mdc
‚îÇ   ‚îú‚îÄ Workflow integration ‚Üí architecture/workflows/[process].mdc
‚îÇ   ‚îî‚îÄ Analytics ‚Üí architecture/analytics/[tracking].mdc
```

## üîÑ ARCHITECTURE FILE OPERATIONS (AI EXECUTION)

### **CREATE_ARCHITECTURE_FILE**
```
PRECONDITIONS:
  1. File size projection ‚â§ 500 lines (300 for indexes)
  2. Proper domain placement identified
  3. File name follows naming convention
  4. MANDATORY: cursor-rules-management.mdc compliance verified

EXECUTION_STEPS:
  1. MANDATORY: Execute cursor-rules-management.mdc CREATE_MDC_FILE operation
  2. Create file at .cursor/rules/rule-framework-v2/architecture/[domain]/[file].mdc
  3. Use architecture rule template from cursor-rules-management.mdc exactly
  4. MANDATORY: Include AI CONTEXT DESCRIPTION section with all four fields
  5. Structure content following domain patterns
  6. Update relevant domain index file
  7. Add cross-references as needed

VALIDATION:
  1. MANDATORY: cursor-rules-management.mdc compliance checklist completed
  2. File location: .cursor/rules/rule-framework-v2/ (verified)
  3. Metadata header starts on line 1 with --- (verified)
  4. YAML format and required fields present (verified)
  5. MANDATORY: AI CONTEXT DESCRIPTION header with all four fields present
  6. File size within limits
  7. Domain index updated
  8. Cross-references valid

POST_ACTIONS:
  1. Update epic step architecture impact documentation
  2. Log architecture file creation in epic progress tracking
  3. MANDATORY: Confirm Cursor IDE compatibility via cursor-rules-management.mdc
```

### **UPDATE_ARCHITECTURE_FILE**
```
PRECONDITIONS:
  1. File exists and is identified
  2. Changes align with epic step requirements
  3. File size will remain ‚â§ 500 lines after update
  4. MANDATORY: cursor-rules-management.mdc compliance required

EXECUTION_STEPS:
  1. MANDATORY: Execute cursor-rules-management.mdc UPDATE_MDC_FILE operation
  2. Load current file content and preserve metadata exactly
  3. Apply updates ONLY below second --- line (cursor-rules-management.mdc requirement)
  4. Follow established patterns from cursor-rules-management.mdc
  5. Validate cross-references remain intact
  6. Verify AI Instructions remain accurate

VALIDATION:
  1. MANDATORY: cursor-rules-management.mdc UPDATE_MDC_FILE validation completed
  2. Metadata preservation verified (no changes to header)
  3. Content updates only below second --- line (verified)
  4. File size within limits
  5. Content consistency maintained
  6. Cross-references functional
  7. Changes properly documented

POST_ACTIONS:
  1. Update epic step with architecture changes made
  2. Log specific updates in epic progress tracking
  3. MANDATORY: Execute cursor-rules-management.mdc post-update validation
```

### **VALIDATE_ARCHITECTURE_COMPLIANCE**
```
EXECUTION_STEPS:
  1. Check all architecture files ‚â§ 500 lines (300 for indexes)
  2. Verify metadata headers present on all files
  3. Validate cross-reference integrity
  4. Confirm domain organization compliance
  5. Check AI Instructions accuracy

ERROR_HANDLING:
  1. Size violations ‚Üí Split file following domain patterns
  2. Missing metadata ‚Üí Generate from AI Instructions
  3. Broken references ‚Üí Update or remove
  4. Misplaced files ‚Üí Move to correct domain
  5. Missing AI Instructions ‚Üí Generate from file purpose

REPORTING:
  1. Log compliance status in epic progress table
  2. Document any fixes applied
  3. Update architecture health metrics
```

## üìä MANDATORY FILE STANDARDS (ENFORCED)

### **Metadata Header Template** (REQUIRED)
```yaml
---
description: [COPY EXACT TEXT FROM "WHEN TO USE" IN AI INSTRUCTIONS]
globs: 
alwaysApply: false
---
```
**MANDATORY COMPLIANCE**: Use cursor-rules-management.mdc architecture rule template EXACTLY
**CURSOR IDE REQUIREMENT**: Metadata MUST start on line 1, exactly 3 dashes, proper YAML format

### **AI CONTEXT DESCRIPTION Template** (MANDATORY)
```markdown
## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Specific triggers for AI to use this file]
**MANDATORY FOR**: [Specific scenarios where this file is required]
**PRIMARY FUNCTION**: [Main purpose and functionality of this file]
**CRITICAL**: [Critical information AI must understand about this file]
```
**ENFORCEMENT**: ALL architecture files MUST include this exact header format with all four fields

### **Index File Structure** (MANDATORY)
```markdown
# [Domain] Architecture Index
**üîç Fast Lookup - [Domain] Files**

## ü§ñ AI Instructions
**When to use**: Navigate [domain] architecture - instant lookup for [specific scenarios]
**How to use**: Scan table ‚Üí identify file ‚Üí apply patterns
**Context**: Database-style index for [domain] architecture

## üìä [DOMAIN] FILE INDEX

| **File** | **When to Use** | **Line Count** | **Contains** |
|----------|-----------------|----------------|--------------|
| file.mdc | Trigger description | ### lines | Content summary |

## ‚ö° QUICK DECISION PATHS
[ASCII decision tree for common use cases]
```

## üèóÔ∏è DOMAIN-SPECIFIC STANDARDS (COMPREHENSIVE)

### **Platform Domains**

#### **Frontend Architecture** (`architecture/frontend/`)
**Common Files**:
- `components.mdc` - UI component patterns and design system integration
- `state-management.mdc` - Application state patterns (Redux, Context, etc.)
- `routing.mdc` - Navigation and routing architecture
- `performance.mdc` - Frontend optimization patterns and metrics
- `accessibility.mdc` - A11y compliance and implementation patterns
- `testing.mdc` - Frontend testing strategies (unit, integration, E2E)

#### **Backend Architecture** (`architecture/backend/`)
**Common Files**:
- `api-design.mdc` - REST/GraphQL API patterns and conventions
- `data-access.mdc` - Database access patterns and ORM usage
- `middleware.mdc` - Request processing and middleware patterns
- `authentication.mdc` - Auth patterns and security implementation
- `caching.mdc` - Caching strategies and implementation patterns
- `services.mdc` - Business logic and service layer patterns

#### **Mobile Architecture** (`architecture/mobile/`)
**Common Files**:
- `platform-patterns.mdc` - iOS/Android specific patterns
- `cross-platform.mdc` - React Native, Flutter, Xamarin patterns
- `offline-support.mdc` - Offline-first architecture and sync patterns
- `push-notifications.mdc` - Notification service integration patterns
- `app-store.mdc` - Deployment and release management patterns
- `device-integration.mdc` - Hardware integration patterns (camera, GPS, etc.)

#### **Desktop Architecture** (`architecture/desktop/`)
**Common Files**:
- `framework-patterns.mdc` - Electron, Qt, WPF, etc. patterns
- `system-integration.mdc` - OS-specific integration patterns
- `packaging.mdc` - Application packaging and distribution patterns
- `updates.mdc` - Auto-update and version management patterns
- `security.mdc` - Desktop security patterns and sandboxing
- `performance.mdc` - Memory and CPU optimization patterns

### **Data & Service Domains**

#### **Database Architecture** (`architecture/database/`)
**Common Files**:
- `schema-design.mdc` - Database schema patterns and normalization
- `migration.mdc` - Database migration strategies and versioning
- `indexing.mdc` - Index design and query optimization patterns
- `replication.mdc` - Database replication and clustering patterns
- `backup.mdc` - Backup and disaster recovery patterns
- `scaling.mdc` - Database scaling patterns (sharding, partitioning)

#### **API Architecture** (`architecture/api/`)
**Common Files**:
- `rest-patterns.mdc` - RESTful API design patterns and conventions
- `graphql-patterns.mdc` - GraphQL schema and resolver patterns
- `versioning.mdc` - API versioning strategies and migration patterns
- `documentation.mdc` - API documentation and testing patterns
- `rate-limiting.mdc` - Rate limiting and throttling patterns
- `error-handling.mdc` - API error response and handling patterns

#### **Integration Architecture** (`architecture/integration/`)
**Common Files**:
- `external-apis.mdc` - Third-party API integration patterns
- `webhooks.mdc` - Webhook implementation and handling patterns
- `message-queues.mdc` - Message queue and event-driven patterns
- `data-sync.mdc` - Data synchronization patterns between systems
- `etl-patterns.mdc` - Extract, Transform, Load patterns
- `event-sourcing.mdc` - Event sourcing and CQRS patterns

### **Operations & Quality Domains**

#### **Infrastructure Architecture** (`architecture/infrastructure/`)
**Common Files**:
- `deployment.mdc` - Deployment patterns and environment management
- `containerization.mdc` - Docker and Kubernetes patterns
- `networking.mdc` - Network architecture and service mesh patterns
- `storage.mdc` - Storage solutions and data persistence patterns
- `scalability.mdc` - Auto-scaling and load balancing patterns
- `disaster-recovery.mdc` - Backup and recovery strategy patterns

#### **Security Architecture** (`architecture/security/`)
**Common Files**:
- `authentication.mdc` - Identity and access management patterns
- `authorization.mdc` - Permission and role-based access patterns
- `encryption.mdc` - Data encryption and key management patterns
- `compliance.mdc` - Regulatory compliance patterns (GDPR, SOC2, etc.)
- `threat-modeling.mdc` - Security threat analysis patterns
- `penetration-testing.mdc` - Security testing and validation patterns

#### **Testing Architecture** (`architecture/testing/`)
**Common Files**:
- `test-strategies.mdc` - Testing pyramid and strategy patterns
- `automation.mdc` - CI/CD and test automation patterns
- `performance-testing.mdc` - Load and stress testing patterns
- `security-testing.mdc` - Security and vulnerability testing patterns
- `contract-testing.mdc` - API contract testing patterns
- `e2e-testing.mdc` - End-to-end testing patterns and frameworks

#### **Performance Architecture** (`architecture/performance/`)
**Common Files**:
- `optimization.mdc` - Code and system optimization patterns
- `profiling.mdc` - Performance profiling and analysis patterns
- `caching.mdc` - Caching strategies and implementation patterns
- `cdn.mdc` - Content delivery network patterns
- `database-optimization.mdc` - Database performance patterns
- `frontend-performance.mdc` - Frontend optimization patterns

#### **Monitoring Architecture** (`architecture/monitoring/`)
**Common Files**:
- `logging.mdc` - Structured logging and log management patterns
- `metrics.mdc` - Application and system metrics patterns
- `alerting.mdc` - Alert management and notification patterns
- `tracing.mdc` - Distributed tracing and observability patterns
- `dashboards.mdc` - Monitoring dashboard and visualization patterns
- `health-checks.mdc` - System health monitoring patterns

#### **Analytics Architecture** (`architecture/analytics/`)
**Common Files**:
- `data-collection.mdc` - User and system data collection patterns
- `reporting.mdc` - Business intelligence and reporting patterns
- `user-tracking.mdc` - User behavior tracking patterns
- `ab-testing.mdc` - A/B testing and experimentation patterns
- `data-pipeline.mdc` - Analytics data pipeline patterns
- `privacy.mdc` - Privacy-compliant analytics patterns

### **Domain Creation Guidelines**

#### **When to Create New Domain**
- **5+ Related Files**: When a topic accumulates 5+ architecture files
- **Distinct Concerns**: When topic has unique patterns not covered by existing domains
- **Cross-Platform Impact**: When patterns affect multiple platforms or systems
- **Specialized Expertise**: When domain requires specialized knowledge or tools

#### **Domain Organization Patterns**
```
architecture/[domain]/
‚îú‚îÄ‚îÄ index.mdc                    # Domain navigation and quick lookup
‚îú‚îÄ‚îÄ patterns.mdc                 # Core patterns specific to domain
‚îú‚îÄ‚îÄ [platform-specific].mdc     # Platform/technology specific patterns
‚îú‚îÄ‚îÄ integration.mdc              # How domain integrates with others
‚îî‚îÄ‚îÄ [subdomain]/                 # Sub-folders when domain grows >5 files
    ‚îú‚îÄ‚îÄ index.mdc               # Sub-domain navigation
    ‚îî‚îÄ‚îÄ [specific-files].mdc    # Focused topic files
```

#### **Domain Index Template**
```markdown
# [Domain] Architecture Index
**üîç Fast Lookup - [Domain] Files**

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: [Domain-specific triggers and scenarios]
**MANDATORY FOR**: [Required usage scenarios for this domain]
**PRIMARY FUNCTION**: [Main purpose of this domain's architecture]
**CRITICAL**: [Critical domain-specific information]

## üìä [DOMAIN] FILE INDEX
| **File** | **When to Use** | **Line Count** | **Contains** |
|----------|-----------------|----------------|--------------|
| patterns.mdc | All [domain] work | ### lines | Core [domain] patterns |

## ‚ö° QUICK DECISION PATHS
[Domain-specific decision tree]

## üîó RELATED DOMAINS
- **Core Patterns**: Required foundation patterns
- **Security**: Security patterns for [domain]
- **Testing**: Testing strategies for [domain]
- **[Other domains]**: Integration points and dependencies
```

## üéØ EPIC INTEGRATION COMPLIANCE (MANDATORY)

### **BLUEPRINT Stage Architecture Requirements**
- ‚úÖ **Core Patterns Consultation**: Read architecture/core/patterns.mdc
- ‚úÖ **Domain Guidelines**: Access relevant domain-specific files
- ‚úÖ **Decision Context**: Review architecture/decisions/ for ADRs
- ‚úÖ **Impact Planning**: Document architecture changes needed in epic step
- ‚úÖ **Compliance Check**: Validate approach against existing patterns

### **CONSTRUCT Stage Architecture Operations**
- ‚úÖ **File Updates**: Update architecture files during implementation
- ‚úÖ **Pattern Application**: Follow established architectural patterns exactly
- ‚úÖ **New File Creation**: Create architecture files if new patterns needed
- ‚úÖ **Index Maintenance**: Update domain indexes when files added
- ‚úÖ **Cross-Reference Management**: Maintain link integrity during changes

### **VALIDATE Stage Architecture Verification**
- ‚úÖ **Documentation Verification**: Confirm all architecture changes documented
- ‚úÖ **Compliance Validation**: Check file sizes, metadata, organization
- ‚úÖ **Pattern Consistency**: Verify implementation follows architecture patterns
- ‚úÖ **Impact Accuracy**: Confirm epic step architecture impact documented correctly
- ‚úÖ **Evolution Tracking**: Update architecture changelog if significant changes

### **Step Completion Architecture Finalization**
- ‚úÖ **Change Archival**: Finalize all architecture updates from step
- ‚úÖ **Index Updates**: Ensure domain indexes reflect current file structure
- ‚úÖ **Decision Documentation**: Create ADRs for major architectural decisions
- ‚úÖ **Epic Documentation**: Update epic with final architecture impact summary
- ‚úÖ **Next Step Preparation**: Prepare architecture context for subsequent steps

## üö® AI COMPLIANCE RULES (ZERO TOLERANCE)

### **File Size Enforcement** (AUTO-BLOCK)
- ‚ùå **Block creation** of files >500 lines (>300 for indexes)
- ‚ùå **Block edits** that would exceed size limits
- ‚úÖ **Auto-suggest** file splitting when approaching limits
- ‚úÖ **Provide patterns** for proper content distribution

### **Metadata Compliance** (AUTO-REPAIR)
- ‚ùå **Block creation** of architecture files without metadata
- ‚úÖ **Auto-generate** metadata from AI Instructions when missing
- ‚úÖ **Validate** metadata accuracy during epic stages
- ‚úÖ **Sync** description with AI Instructions automatically

### **Epic Integration Enforcement** (MANDATORY)
- ‚ùå **Block epic BLUEPRINT** without architecture consultation
- ‚ùå **Block epic CONSTRUCT** without planned architecture updates
- ‚ùå **Block epic VALIDATE** without architecture compliance check
- ‚úÖ **Auto-trigger** architecture operations during epic stages

### **Organization Compliance** (AUTO-CORRECT)
- ‚ùå **Block creation** outside architecture/ directory
- ‚ùå **Block incorrect** domain placement
- ‚úÖ **Auto-suggest** correct location for new files
- ‚úÖ **Auto-update** indexes when files added/moved

## üìã AI EXECUTION CHECKLIST

### **Before Architecture Work**
- [ ] Identify current epic step and architecture requirements
- [ ] Check file size limits for target files
- [ ] Verify domain placement for new files
- [ ] Prepare metadata headers for new files

### **During Architecture Updates**
- [ ] Follow established patterns from domain guidelines
- [ ] Maintain file size limits during edits
- [ ] Update cross-references when moving/creating files
- [ ] Document changes in epic step architecture impact

### **After Architecture Changes**
- [ ] Validate file size compliance
- [ ] Check metadata header accuracy
- [ ] Verify cross-reference integrity  
- [ ] Update epic progress with architecture changes completed

## üîó FRAMEWORK INTEGRATION POINTS

### **Epic Lifecycle Rules Integration**
- **BLUEPRINT**: Mandatory architecture consultation via this file
- **CONSTRUCT**: Architecture updates following this file's standards
- **VALIDATE**: Architecture compliance checking via this file
- **COMPLETION**: Architecture finalization following this file's procedures

### **User Rules Template Integration**
- **AI Instructions**: Reference this file during epic work
- **Architecture Updates**: Execute via this file's operation procedures
- **Compliance Checks**: Validate against this file's standards
- **Progress Tracking**: Document architecture work via this file's requirements

### **Epic Registry Integration**
- **Status Updates**: Include architecture compliance status
- **Progress Tracking**: Track architecture work completion
- **Portfolio Management**: Consider architecture impact in epic capacity
- **Completion Verification**: Require architecture compliance for step completion

## üìÅ COMPREHENSIVE DOMAIN ARCHITECTURE STRUCTURE

### **Recommended Directory Structure**
```
/.cursor/rules/rule-framework-v2/architecture/
‚îú‚îÄ‚îÄ index.mdc                           # Master navigation (under 300 lines)
‚îú‚îÄ‚îÄ core/                               # System-wide patterns
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Core domain navigation
‚îÇ   ‚îú‚îÄ‚îÄ patterns.mdc                   # Mandatory patterns (under 500 lines)
‚îÇ   ‚îî‚îÄ‚îÄ maintenance.mdc                # Architecture maintenance automation
‚îú‚îÄ‚îÄ decisions/                          # Architecture Decision Records
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # ADR navigation
‚îÇ   ‚îú‚îÄ‚îÄ adr-template.mdc               # ADR creation template
‚îÇ   ‚îú‚îÄ‚îÄ sample-decisions.mdc           # ADR examples and patterns
‚îÇ   ‚îî‚îÄ‚îÄ [topic]-decisions.mdc          # Specific decision records
‚îú‚îÄ‚îÄ workflows/                          # Process integration patterns
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Workflow navigation
‚îÇ   ‚îî‚îÄ‚îÄ [process].mdc                  # Specific workflow patterns
‚îú‚îÄ‚îÄ frontend/                           # Web frontend architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Frontend navigation
‚îÇ   ‚îú‚îÄ‚îÄ components.mdc                 # UI component patterns
‚îÇ   ‚îú‚îÄ‚îÄ state-management.mdc           # State management patterns
‚îÇ   ‚îú‚îÄ‚îÄ routing.mdc                    # Navigation patterns
‚îÇ   ‚îú‚îÄ‚îÄ performance.mdc                # Frontend optimization
‚îÇ   ‚îú‚îÄ‚îÄ accessibility.mdc              # A11y patterns
‚îÇ   ‚îî‚îÄ‚îÄ testing.mdc                    # Frontend testing
‚îú‚îÄ‚îÄ backend/                            # Server-side architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Backend navigation
‚îÇ   ‚îú‚îÄ‚îÄ api-design.mdc                 # API patterns
‚îÇ   ‚îú‚îÄ‚îÄ data-access.mdc                # Database access patterns
‚îÇ   ‚îú‚îÄ‚îÄ middleware.mdc                 # Request processing
‚îÇ   ‚îú‚îÄ‚îÄ authentication.mdc             # Auth implementation
‚îÇ   ‚îú‚îÄ‚îÄ caching.mdc                    # Caching strategies
‚îÇ   ‚îî‚îÄ‚îÄ services.mdc                   # Business logic patterns
‚îú‚îÄ‚îÄ mobile/                             # Mobile application architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Mobile navigation
‚îÇ   ‚îú‚îÄ‚îÄ platform-patterns.mdc          # iOS/Android patterns
‚îÇ   ‚îú‚îÄ‚îÄ cross-platform.mdc             # React Native/Flutter
‚îÇ   ‚îú‚îÄ‚îÄ offline-support.mdc            # Offline-first patterns
‚îÇ   ‚îú‚îÄ‚îÄ push-notifications.mdc         # Notification patterns
‚îÇ   ‚îú‚îÄ‚îÄ app-store.mdc                  # Release management
‚îÇ   ‚îî‚îÄ‚îÄ device-integration.mdc         # Hardware integration
‚îú‚îÄ‚îÄ desktop/                            # Desktop application architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Desktop navigation
‚îÇ   ‚îú‚îÄ‚îÄ framework-patterns.mdc         # Electron/Qt/WPF patterns
‚îÇ   ‚îú‚îÄ‚îÄ system-integration.mdc         # OS integration
‚îÇ   ‚îú‚îÄ‚îÄ packaging.mdc                  # App packaging
‚îÇ   ‚îú‚îÄ‚îÄ updates.mdc                    # Auto-update patterns
‚îÇ   ‚îú‚îÄ‚îÄ security.mdc                   # Desktop security
‚îÇ   ‚îî‚îÄ‚îÄ performance.mdc                # Optimization patterns
‚îú‚îÄ‚îÄ database/                           # Database architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Database navigation
‚îÇ   ‚îú‚îÄ‚îÄ schema-design.mdc              # Schema patterns
‚îÇ   ‚îú‚îÄ‚îÄ migration.mdc                  # Migration strategies
‚îÇ   ‚îú‚îÄ‚îÄ indexing.mdc                   # Query optimization
‚îÇ   ‚îú‚îÄ‚îÄ replication.mdc                # Clustering patterns
‚îÇ   ‚îú‚îÄ‚îÄ backup.mdc                     # Disaster recovery
‚îÇ   ‚îî‚îÄ‚îÄ scaling.mdc                    # Scaling patterns
‚îú‚îÄ‚îÄ api/                                # API and service architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # API navigation
‚îÇ   ‚îú‚îÄ‚îÄ rest-patterns.mdc              # RESTful patterns
‚îÇ   ‚îú‚îÄ‚îÄ graphql-patterns.mdc           # GraphQL patterns
‚îÇ   ‚îú‚îÄ‚îÄ versioning.mdc                 # API versioning
‚îÇ   ‚îú‚îÄ‚îÄ documentation.mdc              # API documentation
‚îÇ   ‚îú‚îÄ‚îÄ rate-limiting.mdc              # Rate limiting
‚îÇ   ‚îî‚îÄ‚îÄ error-handling.mdc             # Error patterns
‚îú‚îÄ‚îÄ integration/                        # System integration architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Integration navigation
‚îÇ   ‚îú‚îÄ‚îÄ external-apis.mdc              # Third-party APIs
‚îÇ   ‚îú‚îÄ‚îÄ webhooks.mdc                   # Webhook patterns
‚îÇ   ‚îú‚îÄ‚îÄ message-queues.mdc             # Event-driven patterns
‚îÇ   ‚îú‚îÄ‚îÄ data-sync.mdc                  # Data synchronization
‚îÇ   ‚îú‚îÄ‚îÄ etl-patterns.mdc               # ETL patterns
‚îÇ   ‚îî‚îÄ‚îÄ event-sourcing.mdc             # Event sourcing/CQRS
‚îú‚îÄ‚îÄ infrastructure/                     # Infrastructure architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Infrastructure navigation
‚îÇ   ‚îú‚îÄ‚îÄ deployment.mdc                 # Deployment patterns
‚îÇ   ‚îú‚îÄ‚îÄ containerization.mdc           # Docker/Kubernetes
‚îÇ   ‚îú‚îÄ‚îÄ networking.mdc                 # Network architecture
‚îÇ   ‚îú‚îÄ‚îÄ storage.mdc                    # Storage patterns
‚îÇ   ‚îú‚îÄ‚îÄ scalability.mdc                # Auto-scaling
‚îÇ   ‚îî‚îÄ‚îÄ disaster-recovery.mdc          # Recovery patterns
‚îú‚îÄ‚îÄ security/                           # Security architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Security navigation
‚îÇ   ‚îú‚îÄ‚îÄ authentication.mdc             # Identity management
‚îÇ   ‚îú‚îÄ‚îÄ authorization.mdc              # Access control
‚îÇ   ‚îú‚îÄ‚îÄ encryption.mdc                 # Data protection
‚îÇ   ‚îú‚îÄ‚îÄ compliance.mdc                 # Regulatory compliance
‚îÇ   ‚îú‚îÄ‚îÄ threat-modeling.mdc            # Security analysis
‚îÇ   ‚îî‚îÄ‚îÄ penetration-testing.mdc        # Security testing
‚îú‚îÄ‚îÄ testing/                            # Testing architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Testing navigation
‚îÇ   ‚îú‚îÄ‚îÄ test-strategies.mdc            # Testing pyramid
‚îÇ   ‚îú‚îÄ‚îÄ automation.mdc                 # CI/CD testing
‚îÇ   ‚îú‚îÄ‚îÄ performance-testing.mdc        # Load testing
‚îÇ   ‚îú‚îÄ‚îÄ security-testing.mdc           # Security validation
‚îÇ   ‚îú‚îÄ‚îÄ contract-testing.mdc           # API contracts
‚îÇ   ‚îî‚îÄ‚îÄ e2e-testing.mdc                # End-to-end testing
‚îú‚îÄ‚îÄ performance/                        # Performance architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Performance navigation
‚îÇ   ‚îú‚îÄ‚îÄ optimization.mdc               # Code optimization
‚îÇ   ‚îú‚îÄ‚îÄ profiling.mdc                  # Performance analysis
‚îÇ   ‚îú‚îÄ‚îÄ caching.mdc                    # Caching strategies
‚îÇ   ‚îú‚îÄ‚îÄ cdn.mdc                        # Content delivery
‚îÇ   ‚îú‚îÄ‚îÄ database-optimization.mdc      # DB performance
‚îÇ   ‚îî‚îÄ‚îÄ frontend-performance.mdc       # Frontend optimization
‚îú‚îÄ‚îÄ monitoring/                         # Monitoring architecture
‚îÇ   ‚îú‚îÄ‚îÄ index.mdc                      # Monitoring navigation
‚îÇ   ‚îú‚îÄ‚îÄ logging.mdc                    # Log management
‚îÇ   ‚îú‚îÄ‚îÄ metrics.mdc                    # System metrics
‚îÇ   ‚îú‚îÄ‚îÄ alerting.mdc                   # Alert management
‚îÇ   ‚îú‚îÄ‚îÄ tracing.mdc                    # Distributed tracing
‚îÇ   ‚îú‚îÄ‚îÄ dashboards.mdc                 # Visualization
‚îÇ   ‚îî‚îÄ‚îÄ health-checks.mdc              # Health monitoring
‚îî‚îÄ‚îÄ analytics/                          # Analytics architecture
    ‚îú‚îÄ‚îÄ index.mdc                      # Analytics navigation
    ‚îú‚îÄ‚îÄ data-collection.mdc            # Data collection
    ‚îú‚îÄ‚îÄ reporting.mdc                  # BI reporting
    ‚îú‚îÄ‚îÄ user-tracking.mdc              # User behavior
    ‚îú‚îÄ‚îÄ ab-testing.mdc                 # Experimentation
    ‚îú‚îÄ‚îÄ data-pipeline.mdc              # Analytics pipeline
    ‚îî‚îÄ‚îÄ privacy.mdc                    # Privacy compliance
```

### **Domain Growth Management**
- **Sub-domain Creation**: When domain reaches 8+ files, create sub-directories
- **Index Management**: Each sub-directory requires its own index.mdc
- **Cross-References**: Maintain navigation links between related domains
- **Specialized Domains**: Create custom domains for project-specific needs

### **Domain Dependencies**
```
CORE ‚Üí All other domains (mandatory foundation)
DECISIONS ‚Üí Referenced by all domains for architectural choices
SECURITY ‚Üí Integrated into all platform and service domains
TESTING ‚Üí Covers all domains with specific testing strategies
PERFORMANCE ‚Üí Cross-cuts all domains with optimization patterns
MONITORING ‚Üí Observes all domains with metrics and logging
```

---

**AI ENFORCEMENT**: Automatic execution during epic stages with zero-tolerance compliance
**EPIC INTEGRATION**: Seamless workflow with epic-lifecycle-rules.mdc and user-rules-template.mdc
**FRAMEWORK COMPLIANCE**: Mandatory standards for all architecture documentation and evolution
**DOMAIN SUPPORT**: Comprehensive coverage for modern software architecture domains


**Last Updated**: 2025-01-27  
**Framework Status**: ‚úÖ PRODUCTION READY  
**AI Compliance**: MANDATORY for all architecture work
