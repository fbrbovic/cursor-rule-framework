---
description: Contains currently active epics that are being worked on or about to be worked on as part of the workflow
globs: 
alwaysApply: false
---
# Active Epics - Current Development Focus
**Last Updated**: 2025-01-27
**Framework Version**: 2.0 - Generic Template

## Purpose & Integration
Active epic workspace maintaining **complete compatibility** with existing architecture and workflow integration patterns. All AI usage rules, architecture consideration, and workflow coordination capabilities preserved and enhanced.

### üîÑ Integration Guarantees
- ‚úÖ **Architecture Integration**: All epics specify "Architecture impact" in steps
- ‚úÖ **Workflow Coordination**: Full EpicReference, EpicPhase, EpicStep support
- ‚úÖ **Natural Language Processing**: Enhanced epic search and context translation
- ‚úÖ **Progress Tracking**: Epic status updates trigger architecture documentation
- ‚úÖ **Cross-Reference Integrity**: Epic-architecture relationships maintained

## Portfolio Status
- **Active Epics**: 0/3 (Ready for new epics)
- **Workflow Integration**: Fully operational with workflow-state.mdc
- **Architecture Alignment**: Validated against architecture/index.mdc and architecture-lifecycle.mdc framework
- **Last Validation**: 2025-01-27
- **Recent Completions**: None (clean framework template)

---

<!-- START: SAMPLE_FEATURE_DEVELOPMENT_EPIC -->
### EPIC: SAMPLE_FEATURE_DEVELOPMENT_EPIC
**Status**: PLANNED
**Priority**: Medium
**Started**: Not started
**Target Completion**: 2-3 weeks

#### Goal
Demonstrate the epic framework with a sample feature development epic that shows how to structure, plan, and execute complex development work using the framework's patterns.

#### Success Criteria
- [ ] **Complete Feature Implementation**: Fully functional feature with comprehensive testing
- [ ] **Architecture Compliance**: All architectural patterns followed and documented
- [ ] **Quality Standards**: 90%+ test coverage and performance benchmarks met
- [ ] **Documentation**: Complete feature documentation and architecture updates
- [ ] **Framework Demonstration**: Epic serves as example for future development work

#### Dependencies & Blockers
- Project architecture defined
- Development environment setup
- Testing framework established

#### PHASE 1: PLANNING_AND_DESIGN - ‚è≥ PLANNED
**Goal**: Complete feature analysis, design, and architecture planning

**Steps:**
1. **REQUIREMENTS_ANALYSIS**: Analyze feature requirements and scope - ‚è≥ 0%
   - Key requirements: Define feature scope, user stories, and acceptance criteria
   - Acceptance criteria: Clear requirements documented, stakeholder approval obtained
   - Architecture impact: core/patterns.mdc - New feature patterns and conventions
   - AI considerations: Ensure requirements are clear and testable
   - Status: PLANNED (0%)

2. **ARCHITECTURE_DESIGN**: Design feature architecture and integration points - ‚è≥ 0%
   - Key requirements: Define system architecture, data models, and API design
   - Acceptance criteria: Architecture diagrams created, integration points defined
   - Architecture impact: architecture/decisions/ - New architectural decisions documented
   - AI considerations: Ensure architecture is scalable and maintainable
   - Status: PLANNED (0%)

3. **TECHNICAL_PLANNING**: Create detailed technical implementation plan - ‚è≥ 0%
   - Key requirements: Define technical approach, technology choices, and implementation strategy
   - Acceptance criteria: Technical plan documented, technology choices justified
   - Architecture impact: architecture/core/patterns.mdc - Technical implementation patterns
   - AI considerations: Ensure plan is detailed enough for implementation
   - Status: PLANNED (0%)

#### PHASE 2: IMPLEMENTATION - ‚è≥ PLANNED
**Goal**: Implement feature according to approved design and architecture

**Steps:**
1. **CORE_IMPLEMENTATION**: Implement core feature functionality - ‚è≥ 0%
   - Key requirements: Build core feature logic, data models, and business logic
   - Acceptance criteria: Core functionality working, unit tests passing
   - Architecture impact: Core implementation patterns and conventions
   - AI considerations: Follow established coding standards and patterns
   - Status: PLANNED (0%)

2. **INTEGRATION_DEVELOPMENT**: Implement feature integrations and APIs - ‚è≥ 0%
   - Key requirements: Build integration points, APIs, and external connections
   - Acceptance criteria: All integrations working, API tests passing
   - Architecture impact: Integration patterns and API design standards
   - AI considerations: Ensure robust error handling and monitoring
   - Status: PLANNED (0%)

3. **USER_INTERFACE**: Implement user interface and user experience - ‚è≥ 0%
   - Key requirements: Build user interface, user flows, and user experience
   - Acceptance criteria: UI complete, user testing successful, accessibility standards met
   - Architecture impact: UI/UX patterns and component standards
   - AI considerations: Follow design system and usability guidelines
   - Status: PLANNED (0%)

#### PHASE 3: TESTING_AND_VALIDATION - ‚è≥ PLANNED
**Goal**: Comprehensive testing and quality validation

**Steps:**
1. **COMPREHENSIVE_TESTING**: Implement full test suite and quality validation - ‚è≥ 0%
   - Key requirements: Unit tests, integration tests, end-to-end tests, performance tests
   - Acceptance criteria: 90%+ test coverage, all tests passing, performance benchmarks met
   - Architecture impact: Testing patterns and quality standards
   - AI considerations: Ensure tests are maintainable and comprehensive
   - Status: PLANNED (0%)

2. **SECURITY_VALIDATION**: Security testing and vulnerability assessment - ‚è≥ 0%
   - Key requirements: Security testing, vulnerability scanning, compliance validation
   - Acceptance criteria: Security tests passing, no critical vulnerabilities found
   - Architecture impact: Security patterns and compliance standards
   - AI considerations: Follow security best practices and standards
   - Status: PLANNED (0%)

3. **PERFORMANCE_OPTIMIZATION**: Performance testing and optimization - ‚è≥ 0%
   - Key requirements: Performance testing, optimization, scalability validation
   - Acceptance criteria: Performance benchmarks met, scalability requirements satisfied
   - Architecture impact: Performance patterns and optimization standards
   - AI considerations: Ensure optimal performance under expected load
   - Status: PLANNED (0%)

#### Notes
- This is a sample epic demonstrating the framework's capabilities
- Replace with actual project epics when implementing the framework
- Demonstrates proper epic structure, phase organization, and step documentation
- Shows integration with architecture impact and AI considerations
<!-- END: SAMPLE_FEATURE_DEVELOPMENT_EPIC -->

---

**Active Epic Guidelines**:
- Maximum 3 active epics for optimal AI context management
- Each epic must specify architecture impact for all steps
- Epic progress automatically updates from workflow completion
- Natural language epic references supported (e.g., "work on authentication from security epic")
- Epic completion triggers automatic archival to epic-completed.mdc
