---
description: Used for when referering to workflow-state or when doing work on any epic
globs: 
alwaysApply: false
---
# workflow_state.md
_Last updated: 2025-06-06_

## State
Phase: null 
Status: null  
CurrentItem: null
EpicReference: null
EpicPhase: null
EpicStep: null  

## Plan
<!-- THe AI fills this in during the BLUEPRINT phase -->

## Rules
> **Keep every major section under an explicit H2 (`##`) heading so the agent can locate them unambiguously.**

### [PHASE: ANALYZE]
1. Read **project_config.md**, relevant code & docs.  
2. **Epic Integration Logic**:
   - If user request mentions epic work (e.g., "work on login from user management epic"), search epics.mdc
   - Identify matching epic, phase, and step from user's natural language description
   - Set CurrentItem to descriptive format, and set epic fields:
     - Set `EpicReference = EPIC_NAME` (if found)
     - Set `EpicPhase = PHASE_NAME` (if found)
     - Set `EpicStep = STEP_NAME` (if found)
   - If no epic context found, leave epic fields as null
3. Summarize requirements. *No code or planning.*

### [PHASE: BLUEPRINT]
1. If `EpicReference` exists, read epic context from epics.mdc for step requirements and acceptance criteria.
2. Decompose task into ordered steps.  
3. Write pseudocode or file-level diff outline under **## Plan**.  
4. Set `Status = NEEDS_PLAN_APPROVAL` and await user confirmation.

### [PHASE: CONSTRUCT]
1. Follow the approved **## Plan** exactly.  
2. After each atomic change:  
   - run test / linter commands specified in `project_config.md`  
   - capture tool output in **## Log**  
3. On success of all steps, set `Phase = VALIDATE`.

### [PHASE: VALIDATE]
1. Rerun full test suite & any E2E checks.  
2. If clean, set `Status = COMPLETED`.  
3. Trigger **RULE_ITERATE_01** when applicable.

---

### RULE_INIT_01
Trigger ▶ `Phase == INIT`  
Action ▶ Ask user for first high-level task → `Phase = ANALYZE, Status = RUNNING`.

### RULE_ITERATE_01
Trigger ▶ `Status == COMPLETED && Items contains unprocessed rows`  
Action ▶  
1. Set `CurrentItem` to next unprocessed row in **## Items**.  
2. Parse epic reference if CurrentItem format is `EPIC_NAME > PHASE_NAME > STEP_NAME`.
3. Clear **## Log**, reset `Phase = ANALYZE, Status = READY`.

### RULE_LOG_ROTATE_01
Trigger ▶ `length(## Log) > 5 000 chars`  
Action ▶ Summarise the top 5 findings from **## Log** into **## ArchiveLog**, then clear **## Log**.

### RULE_EPIC_UPDATE_01
Trigger ▶ `Phase == VALIDATE && Status == COMPLETED && EpicReference != null`
Action ▶
1. Parse EpicReference, EpicPhase, and EpicStep to identify epic location in epics.mdc.
2. Update corresponding epic step status to include completion percentage, date, and notes.
3. Check if all steps in the phase are completed, update phase status accordingly.
4. Add completion entry to epic notes section with timestamp.

### RULE_SUMMARY_01
Trigger ▶ `Phase == VALIDATE && Status == COMPLETED`  
Action ▶ 
1. Read `project_config.md`.
2. Construct the new changelog line: `- <One-sentence summary of completed work>`.
3. Find the `## Changelog` heading in `project_config.md`.
4. Insert the new changelog line immediately after the `## Changelog` heading and its following newline (making it the new first item in the list).

---

## Epic Integration Usage

### **Realistic User Interactions**

#### **Starting Epic Work**
```bash
# User says:
"Start working on the login component from the user management epic"

# AI automatically:
1. Searches epics.mdc for user management epic
2. Finds the login component step in authentication phase
3. Sets CurrentItem: "Login component implementation"
4. Sets epic fields:
   EpicReference: USER_MGMT_EPIC
   EpicPhase: AUTHENTICATION_PHASE  
   EpicStep: LOGIN_COMPONENT_STEP
5. Reads epic context during blueprint phase
```

#### **Epic Progress Updates**
```bash
# User says:
"Update the login component progress to 75%, core functionality is done but still need remember me feature"

# AI automatically:
1. Finds current epic work in epics.mdc
2. Updates step status to IN_PROGRESS (75%)
3. Updates notes with user's progress description
4. Sets last updated date
```

#### **Standalone Work (No Epic)**
```bash
# User says:
"Fix the payment processing bug in checkout"

# AI automatically:
1. No epic context mentioned, processes as standalone work
2. Sets CurrentItem: "Fix payment processing bug"
3. Leaves epic fields null:
   EpicReference: null
   EpicPhase: null
   EpicStep: null
```

### **AI Epic Management Commands**
The AI handles these natural language requests:
- **"Plan an epic for [feature]"** → Creates new epic in epics.mdc
- **"Work on [step] from [epic]"** → Starts workflow with epic context
- **"Update progress on [current work]"** → Updates epic step status
- **"Mark [step] as complete"** → Sets step to 100% and updates epic
- **"Show epic status"** → Displays current epic progress

---

## Items
| id | description | status |
|----|-------------|--------|

## Log
<!-- AI appends detailed reasoning, tool output, and errors here -->

## ArchiveLog
<!-- RULE_LOG_ROTATE_01 stores condensed summaries here -->
