# Epic Registry - Master Index
**Last Updated**: 2025-01-27
**Framework Version**: 3.0 - Individual Epic Files with Fast AI Updates

## Purpose & Framework Integration
Master index and status hub for ALL epics stored as individual files in `/.cursor/rules/rule-framework-v2/epics/`. Optimized for fast AI updates with designated update zones for maximum efficiency.

### üöÄ Framework v3.0 Features
- ‚úÖ **Individual Epic Storage**: Each epic in separate `.mdc` file
- ‚úÖ **Fast AI Updates**: Designated update zones for status tracking
- ‚úÖ **Registry as Master Index**: Primary interface for epic discovery
- ‚úÖ **Integrated Step Stages**: BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE per step
- ‚úÖ **Architecture Integration**: Full architecture framework compliance

## üìä EPIC REGISTRY TABLE (AI UPDATE ZONE)
| Epic Name | Status | Priority | Current Phase | Current Step | Stage | Progress | Next Action |
|-----------|--------|----------|---------------|--------------|-------|----------|-------------|
| SAMPLE_FEATURE_DEVELOPMENT | PLANNED | Medium | Phase1 | Step1.1 | PLANNED | 0% | Blueprint planning |

## üîç EPIC QUICK LOOKUP (AI SEARCH ZONE)

### **All Available Epics**
- **SAMPLE_FEATURE_DEVELOPMENT** (PLANNED) - Framework demonstration epic
  - Location: `epics/SAMPLE_FEATURE_DEVELOPMENT.mdc`
  - Phases: 3 phases, 9 total steps
  - Dependencies: None (foundation epic)

### **Active Epics** (0/3 capacity available)
*No epics currently active*

### **Planned Epics** (1 ready for activation)
- **SAMPLE_FEATURE_DEVELOPMENT**: Framework demonstration and template

### **Completed Epics** (0 archived)
*No epics completed yet*

## üéØ EPIC DISCOVERY & NATURAL LANGUAGE ROUTING

### **Natural Language Epic Search**
The registry supports natural language epic discovery:
- **"work on sample feature"** ‚Üí Routes to SAMPLE_FEATURE_DEVELOPMENT
- **"feature development epic"** ‚Üí Routes to SAMPLE_FEATURE_DEVELOPMENT
- **"demonstration epic"** ‚Üí Routes to SAMPLE_FEATURE_DEVELOPMENT

### **Epic Context Mapping**
- **Feature Development**: SAMPLE_FEATURE_DEVELOPMENT
- **Framework Demo**: SAMPLE_FEATURE_DEVELOPMENT
- **Template Example**: SAMPLE_FEATURE_DEVELOPMENT

## üìà PORTFOLIO ANALYTICS (AUTO-CALCULATED)

### **Epic Count Summary**
- **Total Epics**: 1
- **Active**: 0 (3 slots available)
- **Planned**: 1
- **Completed**: 0
- **Blocked/Paused**: 0

### **Progress Overview**
- **Overall Portfolio Progress**: 0% (no active epics)
- **Average Epic Progress**: N/A (no active work)
- **Active Capacity**: 0/3 epics (100% available)

### **Architecture Impact Summary**
- **Architecture Domains Affected**: 0 (no active work)
- **Pending Architecture Changes**: To be determined
- **Architecture Evolution Score**: Baseline (framework template)

## üîÑ REGISTRY MAINTENANCE (AUTO-MANAGED)

### **Automated Updates**
The registry automatically updates when:
- Epic status changes (AI updates registry table)
- Step progress changes (AI updates current phase/step/stage)
- Epic completion occurs (AI updates portfolio analytics)
- New epics created (AI adds new registry entries)

### **Registry Update Rules**
**üéØ AI UPDATE ZONES** (AI can modify these areas):
1. **üìä EPIC REGISTRY TABLE**: Status, progress, current phase/step/stage
2. **üîç EPIC QUICK LOOKUP**: Epic status and basic information
3. **üìà PORTFOLIO ANALYTICS**: Calculated summaries and metrics

**üö´ AI PROTECTED ZONES** (AI must never modify):
- Framework documentation and rules
- Natural language routing patterns
- Registry structure and headers

## üìã EPIC LIFECYCLE OPERATIONS

### **Adding New Epic**
1. Create new epic file: `epics/[EPIC_NAME].mdc`
2. Add entry to registry table with PLANNED status
3. Update quick lookup section with epic information
4. Update portfolio analytics with new epic count

### **Activating Epic** 
1. Change epic status to ACTIVE in registry table
2. Update current phase/step to first step, stage to BLUEPRINT
3. Verify active epic count < 3 (enforce capacity limit)
4. Update portfolio analytics with active epic metrics

### **Epic Progress Updates**
1. Update registry table when step stage changes
2. Update progress percentage when steps complete
3. Update current phase/step when advancing
4. Update next action with current focus

### **Epic Completion**
1. Change epic status to COMPLETED in registry table
2. Update portfolio analytics with completion metrics
3. Move epic from active to completed in quick lookup
4. Archive epic file (keep in epics directory)

## üîó Individual Epic File Integration

### **Epic File Location Pattern**
- **File Path**: `/.cursor/rules/rule-framework-v2/epics/[EPIC_NAME].mdc`
- **Naming**: Epic name in UPPERCASE with underscores
- **Example**: `SAMPLE_FEATURE_DEVELOPMENT.mdc`

### **Epic File Structure Requirements**
Each epic file must contain:
- **Progress Table**: Top-level table for AI updates
- **Epic Metadata**: Status, priority, dependencies, domains
- **Goals & Success Criteria**: Clear objectives and measurable outcomes
- **Phases and Steps**: Detailed breakdown with requirements
- **Step Stages**: BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE per step

### **Registry-Epic File Synchronization**
- **Registry Table**: Reflects current status from epic files
- **Epic Progress Tables**: Updated during step stage execution
- **Bidirectional Sync**: Changes in either location update both
- **Consistency Validation**: Automatic verification of sync accuracy

## üéØ AI OPERATING INSTRUCTIONS

### **Epic Discovery**
When user requests epic work:
1. Search registry quick lookup for matching epic
2. Route to appropriate epic file in epics directory
3. Read epic progress table for current status
4. Identify current step and stage for work focus

### **Epic Status Updates**
When updating epic progress:
1. **Primary Update**: Epic file progress table
2. **Secondary Update**: Registry table for consistency
3. **Validation**: Verify both locations match
4. **Analytics**: Update portfolio metrics automatically

### **Epic Work Execution**
When working on epic steps:
1. Follow step stage workflow (BLUEPRINT ‚Üí CONSTRUCT ‚Üí VALIDATE)
2. Update epic progress table at each stage transition
3. Update registry table when changing steps or phases
4. Maintain architecture integration throughout

### **Natural Language Processing**
When user says "work on [epic description]":
1. Use natural language routing to identify epic
2. Load epic file for detailed context
3. Identify current step and stage
4. Begin appropriate stage workflow

---

**Registry Purpose**: Master index providing instant epic overview and fast AI updates
**Framework Integration**: Central coordination for individual epic file system
**Update Optimization**: Designated update zones for maximum AI efficiency
**Architecture Compliance**: Full integration with architecture framework requirements


**Registry Purpose**: Master control hub providing instant epic overview and discovery  
**Framework Integration**: Central coordination point for all epic lifecycle operations  
**Quality Assurance**: Primary source of truth ensuring epic system integrity and compliance
