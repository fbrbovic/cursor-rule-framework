---
description: Comprehensive cursor rules management including location policy and metadata preservation. Used anytime new cursor AI rule is to be generated or if existing one is updated.
globs: 
alwaysApply: false
---
# üö® CRITICAL: Cursor Rules Management Policy üö®

This rule ensures proper location, format, and handling of all Cursor MDC rule files.

## PART 1: MANDATORY LOCATION POLICY

### All Cursor Rules Must Live in `.cursor/rules/rule-framework-v2/`

**This is the ONLY acceptable location for cursor rules files (.mdc).**

#### ‚úÖ Correct Locations
- ‚úÖ `.cursor/rules/rule-framework-v2/rules.mdc`
- ‚úÖ `.cursor/rules/rule-framework-v2/architecture/index.mdc`
- ‚úÖ `.cursor/rules/rule-framework-v2/any-other-rule.mdc`

#### ‚ùå INCORRECT Locations (NEVER USE)
- ‚ùå `rules.mdc` (root level)
- ‚ùå `migration.mdc` (root level)
- ‚ùå `backend-encore/rules.mdc`
- ‚ùå Any other location outside `.cursor/rules/rule-framework-v2/`

#### Why Location Matters
1. **Cursor IDE Integration**: Cursor only recognizes rules in `.cursor/rules/rule-framework-v2/`
2. **Team Consistency**: All team members expect rules in standard location
3. **Version Control**: Proper .gitignore handling for cursor-specific files
4. **Tool Compatibility**: Other cursor-compatible tools expect this structure

## PART 2: MANDATORY MDC METADATA FORMAT

### What is MDC Metadata?
Every `.mdc` file in the `.cursor/rules/rule-framework-v2/` directory must have metadata at the top in this format:

```
---
description: Brief description of what this rule does
globs: file/pattern/to/match/**/*.*
alwaysApply: true/false
---

# Rule content starts here
```

### ABSOLUTE REQUIREMENTS

#### 1. Never Remove or Modify Delimiters
- The `---` lines at the beginning and end of metadata are CRITICAL
- Removing these breaks the MDC format and disables the rule
- Always preserve exactly three dashes on each line

#### 2. Always Preserve Existing Fields
When updating an MDC file, you MUST preserve:
- `description`: Brief description of the rule's purpose
- `globs`: File patterns that trigger this rule
- `alwaysApply`: Whether rule applies to all contexts (true/false)

#### 3. Only Update Content Below Metadata
- Only modify content below the second `---` line
- Never modify anything between the first and second `---` lines
- If you need to change metadata fields, do so carefully and preserve the format

## PART 3: AI ASSISTANT WORKFLOW

### Before Creating/Editing Rules
1. **ALWAYS** check if `.cursor/rules/rule-framework-v2/` directory exists
2. If it doesn't exist, create it first
3. **ALWAYS** create rules in `.cursor/rules/rule-framework-v2/filename.mdc`
4. **ALWAYS** start with proper MDC metadata
5. Choose appropriate `globs` pattern for the rule's scope
6. Use `alwaysApply: true` only for workspace-wide rules

### Before Deleting Root-Level Rules
1. **ALWAYS** compare root-level rules with `.cursor/rules/rule-framework-v2/` versions
2. Merge any new content from root-level to `.cursor/rules/rule-framework-v2/`
3. Only delete root-level after confirming merge is complete

### When Updating Existing Rules
1. Read the entire file first to understand current metadata
2. Preserve existing metadata exactly as-is
3. Only modify content below the second `---` line
4. Test the rule still works after updating

## PART 4: COMMON MDC FILE TYPES AND METADATA

### Architecture Rules
```
---
description: Backend architecture guidelines and service structure
globs: backend-encore/**/*.*
alwaysApply: true
---
```

### Service-Specific Rules
```
---
description: Rules for specific service or integration
globs: backend-encore/service-name/**/*.*
alwaysApply: false
---
```

### Testing Rules
```
---
description: Testing patterns and requirements
globs: **/*.test.ts, **/*.spec.ts
alwaysApply: false
---
```

### Global Workspace Rules
```
---
description: Rules applying to entire workspace
globs: **/*.*
alwaysApply: true
---
```

## PART 5: ERROR DETECTION AND RECOVERY

### Symptoms of Broken MDC Files
- Rule doesn't appear in Cursor's rule picker
- Rule doesn't automatically apply when expected
- File patterns don't match correctly
- Rule appears as "invalid" in Cursor settings

### Recovery Process
1. Check for missing or malformed `---` delimiters
2. Verify all required fields are present
3. Ensure proper YAML format in metadata section
4. Verify file is in `.cursor/rules/rule-framework-v2/` directory
5. Test rule functionality after fixing

## PART 6: VALIDATION CHECKLIST

Before saving any MDC file, verify:
- [ ] File is saved in `.cursor/rules/rule-framework-v2/` directory
- [ ] Metadata section starts and ends with `---`
- [ ] All required fields are present and properly formatted
- [ ] `globs` pattern matches intended files
- [ ] `alwaysApply` setting is appropriate
- [ ] Content below metadata follows proper markdown format
- [ ] No duplicate rules files in root or other locations

## PART 7: COMMON MISTAKES TO AVOID

### Location Mistakes
- Placing MDC files outside `.cursor/rules/rule-framework-v2/` directory
- Creating duplicate rules in multiple locations
- Not checking for existing `.cursor/rules/rule-framework-v2/` directory

### Format Mistakes  
- Removing metadata when updating content
- Changing `globs` patterns without understanding implications
- Using incorrect YAML syntax in metadata
- Mixing content with metadata section

### Memory Reminder for AI Assistant
- **Never** create rules files outside `.cursor/rules/rule-framework-v2/`
- **Always** use the full path: `.cursor/rules/rule-framework-v2/filename.mdc`
- **Always** preserve existing metadata exactly
- **Always** check for content differences before deleting duplicates

## PART 8: DEBUGGING TIPS

- Use Cursor's rule management interface to validate MDC files
- Check Cursor settings to see if rules are properly loaded
- Test rule application by matching against expected file patterns
- Verify rule behavior in different contexts (auto-apply vs manual)

## PART 9: LIVING DOCUMENTATION ENHANCEMENT

### Architecture Documentation Integration
Living documentation rules ensure architecture documentation stays current with code changes.

#### Architecture Update Triggers
When working on tasks that involve:
- New components or architectural patterns
- Framework or build system changes  
- Authentication or security modifications
- API integration updates
- Deployment or infrastructure changes

The system will automatically assess architectural impact and prompt for documentation updates.

#### Living Documentation Templates

**Architecture Change Documentation Template:**
```markdown
## Architecture Change: [CHANGE_TITLE]
**Date**: [YYYY-MM-DD]
**Impact Level**: [MINOR/MODERATE/MAJOR]
**Areas Affected**: [List of architecture sections]

### Change Description
- What was changed
- Why it was changed
- Implementation approach

### Architecture Documentation Updates Required
- [ ] Update section: [specific section]
- [ ] Update ADR: [relevant ADR]
- [ ] Update cursor rule: [if applicable]
- [ ] Cross-reference updates needed

### Validation
- [ ] Architecture documentation reflects new reality
- [ ] Cross-references updated appropriately
- [ ] AI context enhanced for future decisions
```

#### Living Documentation Metadata
For architecture-related cursor rules, add this metadata enhancement:
```yaml
livingDocs: true
updateTriggers: ["component-creation", "routing-changes", "state-management", "integrations"]  
documentationTargets: [".cursor/rules/rule-framework-v2/architecture/index.mdc", "apps/frontend/component-patterns.mdc"]
```

### Automated Documentation Freshness
The system tracks documentation freshness and prompts updates when:
1. Major architectural changes are detected during development
2. New patterns are introduced that should be documented
3. Existing patterns are modified significantly
4. Integration or infrastructure changes occur

### Documentation Currency Validation
Periodic validation ensures architecture documentation remains aligned with actual implementation:
- Component architecture matches actual component organization
- ADRs reflect current technology choices and configurations  
- Integration patterns documented match actual integrations
- Build and deployment documentation reflects current setup

---

**This rule was created to prevent repeated mistakes with cursor rules location and format. All requirements must be followed exactly.**
