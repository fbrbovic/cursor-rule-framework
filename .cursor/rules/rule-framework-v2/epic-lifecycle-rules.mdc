---
description: Contains rules and instructions on how our epic lifecycle process works, MUST BE FOLLOWED for every epic being worked on or created. Workflow will update epic status as it completes its phases. 
globs: 
alwaysApply: false
---
# Epic Lifecycle Management Framework - Enhanced
**Last Updated**: 2025-01-27
**Version**: 1.1 - High Reliability & Integration Preservation

## Framework Purpose
Standardized, scalable system for managing any number of epics while maintaining optimal AI performance through intelligent file organization and lifecycle automation. **Preserves all existing architecture and workflow integration capabilities.**

## Core Principles
1. **Performance First**: Maximum 3 active epics to maintain AI context effectiveness
2. **Complete Preservation**: Never lose epic details during status transitions
3. **Scalable Architecture**: System works for 5 epics or 500 epics
4. **Standardized Process**: Consistent patterns for all epic management
5. **AI-Optimized**: Each file designed for specific AI use cases
6. **üîí Zero Capability Loss**: All existing integrations preserved and enhanced
7. **üõ°Ô∏è High Reliability**: Built-in failsafes and data integrity validation
8. **üß™ Testing-First Development**: Comprehensive testing strategy mandatory for all epics
9. **üìä Quality Assurance**: 90%+ test coverage required for all epic phases
10. **üîç Continuous Validation**: Testing integrated into every epic development phase

## üîÑ Preserved Integration Capabilities

### Architecture Integration (PRESERVED & ENHANCED)
All existing architecture integration patterns remain fully functional with enhanced architecture lifecycle framework:
- ‚úÖ **Epic Architecture Impact**: All epics continue to specify "Architecture impact" in steps with domain-specific targeting
- ‚úÖ **Architecture Consideration**: Epic planning integrates with comprehensive architecture framework via `architecture/index.mdc`
- ‚úÖ **Architecture Lifecycle Compliance**: All epic architecture work follows `architecture-lifecycle.mdc` framework requirements
- ‚úÖ **Architecture Updates**: Epic completion triggers architecture documentation updates following domain organization
- ‚úÖ **Cross-Reference Integrity**: Epic-architecture relationships maintained across all files with framework compliance
- ‚úÖ **Metadata Compliance**: Architecture files created/updated during epics include proper Cursor rule metadata
- ‚úÖ **Index Optimization**: Architecture index files maintained as fast lookup structures per framework standards

### Workflow Integration (PRESERVED & ENHANCED)
All existing workflow-state.mdc integration remains fully operational:
- ‚úÖ **Epic Search & Context**: Natural language epic search preserved across all files
- ‚úÖ **Epic Reference Setting**: EpicReference, EpicPhase, EpicStep workflow fields maintained
- ‚úÖ **Progress Updates**: Epic status updates from workflow completion preserved
- ‚úÖ **Natural Language Processing**: User request ‚Üí epic context translation enhanced
- ‚úÖ **Workflow Rules**: All RULE_EPIC_* patterns preserved and enhanced

### AI Usage Rules (PRESERVED & ENHANCED)
- ‚úÖ **Epic Creation**: Enhanced planning with distributed file management
- ‚úÖ **No Execution**: Epic work execution remains in workflow-state.mdc only
- ‚úÖ **Epic Search**: Enhanced search across epic-active.mdc, epic-planned.mdc, epic-registry.mdc
- ‚úÖ **Progress Tracking**: Enhanced with cross-file consistency validation

## üõ°Ô∏è High Reliability Architecture

### Data Integrity Safeguards
```yaml
Validation Rules:
  - Epic ID consistency across all files
  - Status synchronization between registry and detail files
  - Dependency validation during epic moves
  - Architecture impact preservation during transitions
  - Workflow reference integrity maintenance

Backup & Recovery:
  - Automatic backup before any epic status change
  - Transaction-like epic moves (all-or-nothing)
  - Rollback procedures for failed transitions
  - Data validation checkpoints after each operation
```

### File Consistency Protocols
```yaml
Cross-File Integrity:
  - Registry-detail file synchronization validation
  - Epic metadata consistency checks
  - Status propagation verification
  - Architecture impact link validation
  - Workflow reference accuracy confirmation

Error Recovery:
  - Automatic inconsistency detection
  - Self-healing procedures for minor discrepancies  
  - Alert protocols for critical inconsistencies
  - Manual intervention protocols for complex issues
```

### Performance Reliability
```yaml
Performance Guarantees:
  - Maximum 3 active epics strictly enforced
  - File size monitoring and alerts
  - AI context optimization validation
  - Response time consistency measurement
  - Memory usage optimization tracking
```

## File Structure & Enhanced Purposes

### `epic-registry.mdc` - Master Control Hub
**Purpose**: Master index of ALL epics across all statuses
**AI Usage**: Search, status tracking, epic discovery, integrity validation
**Content**: Epic metadata, status, completion rates, relationships, validation checksums
**Max Size**: Unlimited (summary format only)
**Reliability**: Primary source of truth for epic status and relationships

### `epic-active.mdc` - Active Development Center  
**Purpose**: Current working epics (detailed planning & execution)
**AI Usage**: Active development, detailed planning, progress tracking, workflow integration
**Content**: Full epic details for 3 epics maximum with enhanced architecture integration
**Max Size**: 3 epics (strictly enforced with alerts)
**Reliability**: Hot-swap capable, real-time synchronization with registry

### `epic-planned.mdc` - Pipeline Management
**Purpose**: Queued epics ready for activation
**AI Usage**: Epic planning, priority management, activation decisions, architecture validation
**Content**: Complete epic plans awaiting activation with preserved architecture impact
**Max Size**: Unlimited with performance monitoring
**Reliability**: Activation-ready validation, dependency chain verification

### `epic-completed.mdc` - Success Archive
**Purpose**: Recently completed epics (last 6 months)  
**AI Usage**: Reference for similar work, lessons learned, pattern analysis
**Content**: Completed epic summaries with key outcomes and architecture contributions
**Max Size**: 6 months retention with automatic archival
**Reliability**: Immutable once written, backup before archival

### `epic-archived.mdc` - Historical Repository
**Purpose**: Long-term storage of completed epics
**AI Usage**: Historical reference, pattern analysis, architecture evolution tracking
**Content**: Compressed epic summaries with architecture decision links
**Max Size**: Unlimited with compression optimization
**Reliability**: Permanent storage, periodic integrity validation

## üèóÔ∏è Architecture Lifecycle Framework Integration

### **Epic Architecture Framework Compliance**
All epics MUST integrate with the architecture lifecycle framework defined in `architecture-lifecycle.mdc`:

#### **Epic Planning Architecture Requirements**
```yaml
Epic Creation:
  - Consult architecture/index.mdc for domain navigation
  - Reference architecture-lifecycle.mdc for framework compliance
  - Specify architecture impact using domain structure (core/, frontend/, backend/)
  - Include architecture file organization requirements in epic steps

Epic Architecture Impact Specification:
  Format: "Architecture impact: [Domain]/[Category]/[File] - [Description]"
  Examples:
    - "Architecture impact: core/patterns.mdc - New mandatory pattern for data validation"
    - "Architecture impact: frontend/guidelines.mdc - Updated component development standards"
    - "Architecture impact: backend/security/index.mdc - New authentication middleware pattern"
```

#### **Epic Architecture Validation Requirements**
- **Framework Compliance**: All architecture work must follow `architecture-lifecycle.mdc` rules
- **Domain Organization**: Architecture changes organized by proper domain structure
- **Metadata Standards**: All new/updated architecture files include proper Cursor rule metadata
- **File Size Limits**: Respect maximum 500 lines per file, 300 lines for index files
- **Index Optimization**: Maintain database-style fast lookup for all index files

#### **Epic Architecture Integration Checklist**
```markdown
## Epic Architecture Framework Integration
- [ ] **Domain Navigation**: Consulted architecture/index.mdc for proper domain identification
- [ ] **Framework Compliance**: Reviewed architecture-lifecycle.mdc requirements
- [ ] **Impact Specification**: Architecture impact specified with domain/category/file format
- [ ] **Metadata Planning**: Planned metadata headers for new architecture files
- [ ] **Size Compliance**: Verified architecture changes respect file size limits
- [ ] **Index Optimization**: Planned index file updates maintain fast lookup structure
```

## Enhanced Epic Lifecycle Rules

### üîÑ Activation Rules (Enhanced)
```yaml
PLANNED ‚Üí ACTIVE:
  - Triggers: Manual activation, dependency completion, workflow integration request
  - Conditions: Active epic count < 3, dependencies satisfied, architecture alignment verified
  - Actions: 
    * Move full epic details to epic-active.mdc
    * Preserve all architecture impact specifications
    * Maintain workflow integration capabilities
    * Update cross-reference integrity
  - Registry: Update status to ACTIVE with timestamp and dependency resolution
  - Reliability: Transaction-style move with rollback capability
```

### ‚úÖ Completion Rules (Enhanced)
```yaml
ACTIVE ‚Üí COMPLETED:
  - Triggers: All phases marked complete, workflow validation complete
  - Actions: 
    * Move to epic-completed.mdc with completion summary
    * Archive architecture contributions and impacts
    * Preserve workflow integration history
    * Generate lessons learned summary
  - Registry: Update status, completion date, success metrics, architecture evolution
  - Auto-activate: Next planned epic if available and dependencies satisfied
  - Reliability: Completion validation, architecture update confirmation
```

### üì¶ Archive Rules (Enhanced)
```yaml
COMPLETED ‚Üí ARCHIVED:
  - Triggers: Automatic after 6 months, manual archival request
  - Actions: 
    * Compress and move to epic-archived.mdc
    * Preserve architecture decision links
    * Maintain searchable metadata
    * Create archive index entry
  - Registry: Update status to ARCHIVED with compression ratio
  - Retention: Permanent (compressed format) with periodic integrity checks
  - Reliability: Compression validation, metadata preservation verification
```

### üîÄ Status Change Rules (Enhanced)
```yaml
BLOCKED/PAUSED ‚Üí ACTIVE:
  - Triggers: Manual resolution, dependency satisfaction, architecture clearance
  - Conditions: Active epic count < 3, blocking issues resolved
  - Actions: 
    * Restore full details to epic-active.mdc
    * Validate architecture alignment
    * Restore workflow integration context
    * Update dependency status
  - Reliability: Restoration validation, context integrity verification

ACTIVE ‚Üí BLOCKED/PAUSED:
  - Triggers: Dependencies, resource constraints, architecture conflicts
  - Actions: 
    * Move to epic-planned.mdc with blocking reason
    * Preserve architecture context
    * Maintain workflow reference state
    * Document blocking conditions
  - Registry: Update status and blocking details with resolution criteria
  - Reliability: Context preservation, blocking reason validation
```

## üìù Epic Format Standards

### Required Epic Wrapper Format
All epics MUST use standardized comment wrappers for AI parsing and management:

```markdown
<!-- START: EPIC_NAME_IN_UPPERCASE -->
### EPIC: EPIC_NAME_IN_UPPERCASE
**Status**: [PLANNED|ACTIVE|COMPLETED|BLOCKED|PAUSED|CANCELLED|ARCHIVED]
**Priority**: [Critical|High|Medium|Low]
**Started**: [Date or "Not started"]
**Target Completion**: [Duration description]

#### Goal
Brief description of what this epic achieves

#### Success Criteria
- [ ] Specific, measurable outcomes
- [ ] Clear completion indicators
- [ ] Business value delivered
- [ ] **90%+ test coverage achieved**
- [ ] **All quality gates passed**
- [ ] **Security testing completed**

#### Testing Strategy
**Comprehensive Testing Approach Required for ALL Epics**
- **Unit Testing**: Component-level testing with 90%+ coverage
- **Integration Testing**: API and service integration validation
- **End-to-End Testing**: Complete user workflow testing
- **Performance Testing**: Load testing and performance benchmarking
- **Security Testing**: Authentication, authorization, and vulnerability testing
- **Regression Testing**: Ensure existing functionality remains intact

#### Dependencies & Blockers
- List any dependencies on other epics or external factors
- Note any current blockers or risks
- **Testing Dependencies**: Required test infrastructure and tools

#### PHASE 1: PHASE_NAME - ‚è≥ STATUS
**Goal**: What this phase accomplishes

**Testing Requirements for Phase 1:**
- [ ] Test strategy defined and documented
- [ ] Test environment setup completed
- [ ] Unit tests planned for all components
- [ ] Integration test scenarios identified
- [ ] Performance benchmarks established

**Step 1.1**: Specific task (Time: X hours)
- Detailed implementation steps
- Expected outcomes
- **Testing Implementation**: Unit tests for this step
- **Validation Criteria**: Test coverage and quality metrics
- **Quality Gates**: All tests passing before step completion

**Step 1.2**: Another specific task (Time: Y hours)
- Implementation details
- Success indicators
- **Testing Requirements**: Integration tests for this step
- **Performance Validation**: Response time and load testing
- **Security Checks**: Authentication and authorization testing

**Phase 1 Success Criteria:**
- [ ] All steps completed successfully
- [ ] **90%+ test coverage achieved for phase components**
- [ ] **All unit and integration tests passing**
- [ ] **Performance benchmarks met**
- [ ] **Security testing completed with no critical vulnerabilities**
- [ ] Quality gates passed
- [ ] Documentation updated

#### PHASE 2: PHASE_NAME - ‚è≥ STATUS
**Goal**: What this phase accomplishes

**Testing Requirements for Phase 2:**
- [ ] End-to-end test scenarios defined
- [ ] Cross-browser testing planned (frontend)
- [ ] Load testing scenarios prepared
- [ ] Security audit checklist completed
- [ ] Regression test suite updated

[Similar structure as Phase 1 with comprehensive testing requirements]

#### Architecture Impact
- Describe how this epic affects the overall architecture
- Reference specific architecture documentation sections
- Note any new patterns or decisions introduced
- **Testing Architecture**: How testing strategy aligns with system architecture

#### Quality Assurance & Monitoring
- **Test Coverage Goals**: Minimum 90% coverage across all components
- **Performance Targets**: Specific response time and throughput requirements
- **Security Standards**: Authentication, authorization, and data protection requirements
- **Monitoring Setup**: Production monitoring and alerting configuration
- **Rollback Procedures**: Tested rollback procedures for production issues

#### Notes & Considerations
- Important implementation notes
- Technical considerations
- Risk mitigation strategies
- **Testing Considerations**: Special testing requirements or challenges

<!-- END: EPIC_NAME_IN_UPPERCASE -->
```
[Clear description of what the epic achieves]

#### Success Criteria
- [ ] [Specific measurable outcomes]
- [ ] [Additional criteria]

#### Dependencies & Blockers
[List of prerequisites and potential blockers]

#### PHASE 1: PHASE_NAME - [Status Icon] [Status]
**Goal**: [What this phase accomplishes]

**Steps:**
1. **STEP_NAME**: [Step description] - [Status Icon] [Percentage]
   - Key requirements: [What must be built/implemented]
   - Acceptance criteria: [How we know it's done]
   - Architecture impact: [How this affects architecture framework - specify domain (core/frontend/backend) and files]
   - AI considerations: [Special AI/automation aspects]
   - Status: [Current status and percentage]

[Additional phases and steps...]

#### Notes
[Important notes, assumptions, or special considerations]
<!-- END: EPIC_NAME_IN_UPPERCASE -->
```

### Epic Naming Conventions
- **Epic Names**: UPPERCASE_WITH_UNDERSCORES ending in _EPIC
- **Phase Names**: DESCRIPTIVE_PHASE_NAME (no _EPIC suffix)  
- **Step Names**: DESCRIPTIVE_STEP_NAME (no special suffixes)
- **Consistency**: Epic name must be identical in START/END comments

### Format Validation Rules
1. **Wrapper Comments**: Must exactly match `<!-- START: EPIC_NAME -->` and `<!-- END: EPIC_NAME -->`
2. **Epic Name Consistency**: Name in wrapper must match epic title
3. **Required Fields**: Status, Priority, Goal, Success Criteria must be present
4. **Architecture Impact**: Every step must include "Architecture impact" specification
5. **AI Considerations**: Every step should include AI automation aspects

## üîÑ BACKWARDS COMPATIBILITY IMPLEMENTATION

### Epic Search & Access Protocol
When AI receives requests to search or access `epics.mdc`:

**Epic Search Routing**:
```yaml
Request: "search epics.mdc for [epic_name]"
Action:
  1. First search epic-active.mdc for immediate matches
  2. If not found, search epic-planned.mdc for comprehensive details
  3. Cross-reference epic-registry.mdc for status and metadata
  4. Return unified epic information as if from single epics.mdc file
```

**Epic Context Reading**:
```yaml
Request: "read epic context from epics.mdc for [EpicReference]"
Action:
  1. Locate epic in appropriate lifecycle file:
     - ACTIVE epics ‚Üí epic-active.mdc
     - PLANNED epics ‚Üí epic-planned.mdc
     - Registry info ‚Üí epic-registry.mdc
  2. Return complete epic context including phases and steps
  3. Maintain identical structure expected by workflow rules
```

**Epic Progress Updates**:
```yaml
Request: "update epic progress in epics.mdc"
Action:
  1. Identify epic location (active vs planned)
  2. Update progress in appropriate lifecycle file
  3. Sync status to epic-registry.mdc
  4. Maintain workflow field compatibility (EpicReference, EpicPhase, EpicStep)
```

### Legacy Rule Compatibility

**RULE_EPIC_UPDATE_01 Compatibility**:
- Maintains exact same trigger conditions and behavior
- Routes epic updates to appropriate lifecycle file
- Preserves progress tracking and status update patterns
- Updates epic-registry.mdc for consistency

**RULE_EPIC_COMPLETION_ARCHIVE_01 Compatibility**:
- Detects epic completion across lifecycle files
- Moves completed epics from active to completion history
- Updates portfolio counts in epic-registry.mdc
- Maintains archival format and structure

**Natural Language Processing**:
- All epic work identification patterns work unchanged
- Epic name matching works across all lifecycle files
- Context translation maintains identical output format
- User experience remains completely transparent

### Workflow Integration Compatibility

**Blueprint Phase Integration**:
```yaml
"Check epics.mdc for planning context":
  Action: Search across epic-active.mdc and epic-planned.mdc
  Return: Unified epic context for planning decisions
  Compatibility: 100% - existing patterns work unchanged
```

**Progress Tracking Integration**:
```yaml
"Track progress in epics.mdc":
  Action: Update appropriate lifecycle file + registry sync
  Return: Transparent progress updates across system
  Compatibility: 100% - all tracking patterns preserved
```

**Epic Reference Resolution**:
```yaml
EpicReference/EpicPhase/EpicStep workflow fields:
  Resolution: Automatic routing to correct lifecycle file
  Context: Full epic details returned regardless of storage location
  Compatibility: 100% - field structure and content identical
```

## ü§ñ Enhanced AI Operating Instructions

### Epic Creation (Enhanced)
1. **Always use standard wrapper format** with proper START/END comments
2. **Always add to epic-planned.mdc first** with full architecture integration
3. **Update epic-registry.mdc** with new entry and relationship mapping
4. **Validate architecture alignment** against architecture/index.mdc (domain navigation) and architecture/core/patterns.mdc (mandatory patterns)
5. **Auto-activate if active count < 3** and dependencies satisfied
6. **Preserve all existing integration patterns** from original epics.mdc
7. **Maintain backwards compatibility** - ensure all references work transparently

### Epic Management (Enhanced)
1. **Check epic-registry.mdc for context** and relationship validation
2. **Work primarily with epic-active.mdc** while maintaining cross-file consistency
3. **Reference other files for historical context** and pattern analysis
4. **Validate architecture integration** during all epic operations
5. **Maintain workflow-state.mdc integration** for execution coordination

### Status Updates (Enhanced)
1. **Always update registry first** with validation checkpoint
2. **Move epic content between files** with transaction-style reliability
3. **Maintain data integrity during transitions** with consistency checks
4. **Validate architecture impact preservation** during moves
5. **Confirm workflow integration continuity** after status changes

### Workflow Integration (PRESERVED)
```yaml
Epic Search Enhancement:
  - Search across epic-active.mdc, epic-planned.mdc, epic-registry.mdc
  - Maintain natural language epic context translation
  - Preserve EpicReference, EpicPhase, EpicStep workflow field population
  - Enhanced epic discovery with distributed file awareness

Architecture Integration (PRESERVED):
  - All epic steps continue to specify "Architecture impact"
  - Epic planning integrates with comprehensive architecture framework via architecture/index.mdc
  - Architecture documentation updates triggered by epic completion
  - Cross-reference integrity maintained across epic lifecycle
```

## üö® Reliability Monitoring & Alerts

### Real-Time Monitoring
- **Epic Count Enforcement**: Alert if active epics exceed 3
- **File Consistency**: Continuous validation of cross-file references
- **Performance Tracking**: Monitor AI context optimization effectiveness
- **Integration Health**: Validate architecture and workflow integrations

### Automatic Recovery Procedures
- **Minor Inconsistencies**: Self-healing with logging
- **Status Mismatches**: Automatic synchronization with user notification
- **File Corruption**: Rollback to last known good state
- **Integration Breaks**: Restoration with integrity validation

### Manual Intervention Triggers
- **Critical Inconsistencies**: Human oversight required
- **Performance Degradation**: Architecture review needed
- **Integration Failures**: Manual resolution with enhanced logging
- **Data Loss Risk**: Immediate backup and protection protocols

## Migration Implementation Plan

### Phase 1: Framework Deployment (Zero Downtime)
1. **Create new file structure** alongside existing epics.mdc
2. **Implement reliability safeguards** with comprehensive validation
3. **Test integration preservation** with existing workflow and architecture patterns
4. **Validate performance characteristics** with current epic load

### Phase 2: Data Migration (Preservation First)
1. **Backup existing epics.mdc** with multiple redundancy
2. **Migrate current epics to epic-planned.mdc** with full data preservation
3. **Activate first 3 epics in epic-active.mdc** with enhanced integration
4. **Populate epic-registry.mdc** with complete metadata and relationships
5. **Validate all integration capabilities** function identically to before

### Phase 3: Enhanced Operations
1. **Enable enhanced reliability features** with monitoring
2. **Implement automation rules** with comprehensive logging
3. **Activate cross-file integrity validation** with real-time monitoring
4. **Deploy performance optimization** with effectiveness measurement

## Quality Standards & Guarantees

### Epic Integrity Guarantee
- **100% Data Preservation**: No epic details lost during any transition
- **Relationship Consistency**: All epic dependencies maintained accurately
- **Architecture Integration**: All architecture impacts preserved and enhanced
- **Workflow Compatibility**: All existing workflow patterns function identically

### Performance Guarantee
- **3-Epic Active Limit**: Strictly enforced with automated alerts
- **Response Time Consistency**: AI performance maintained or improved
- **Memory Optimization**: Efficient file structure with monitoring
- **Scalability Assurance**: Performance maintained regardless of total epic count

### Integration Guarantee
- **Architecture Integration**: All existing patterns preserved and enhanced
- **Workflow Integration**: All workflow-state.mdc patterns function identically
- **Cross-Reference Integrity**: All epic-architecture relationships maintained
- **Search Enhancement**: Epic discovery improved while preserving all capabilities

---

## üèÜ Framework Benefits Summary

### For Current Use Case (20 Epics)
- **epic-active.mdc**: 3 epics with enhanced integration (Foundation, Shared Components, Inventory)
- **epic-planned.mdc**: 17 remaining epics with preserved architecture impacts
- **epic-registry.mdc**: Complete portfolio overview with reliability monitoring
- **Zero Capability Loss**: All existing features preserved and enhanced

### For Future Scaling (Unlimited Epics)
- **Unlimited Capacity**: System handles 100+ epics with same performance
- **Reliability Guarantee**: Built-in safeguards prevent data loss or corruption
- **Integration Preservation**: All capabilities scale without degradation
- **Performance Optimization**: AI always works with optimal 3-epic context

### Enhanced Capabilities
- **üîç Enhanced Search**: Distributed epic discovery across multiple files
- **üîí Data Protection**: Transaction-style epic operations with rollback
- **üìä Performance Monitoring**: Real-time effectiveness measurement
- **ü§ù Integration Enhancement**: Improved architecture and workflow coordination
- **üõ°Ô∏è Reliability Assurance**: Comprehensive safeguards and recovery procedures

---

**This enhanced framework provides a bulletproof, scalable foundation for epic management that preserves and enhances all existing capabilities while adding enterprise-grade reliability and unlimited scalability.**

**END OF COMPATIBILITY VALIDATION**
