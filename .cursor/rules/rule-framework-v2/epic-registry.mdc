---
description: Epic discovery, status tracking, progress updates, epic routing, portfolio management
alwaysApply: false
---
# Epic Registry - AI Master Index v3.0

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: Epic discovery, status tracking, progress updates, epic routing, portfolio management
**PRIMARY FUNCTION**: Fast lookup and status coordination for individual epic files
**UPDATE FREQUENCY**: Every epic status/progress change, step advancement, epic activation/completion
**SEARCH PURPOSE**: Route user requests to specific epics, identify current work, track portfolio capacity

## üìä EPIC REGISTRY TABLE (AI UPDATE ZONE)
| Epic Name | Status | Priority | Current Phase | Current Step | Stage | Progress | Next Action | File Location |
|-----------|--------|----------|---------------|--------------|-------|----------|-------------|---------------|
| SAMPLE_FEATURE_DEVELOPMENT | PLANNED | Medium | Phase1 | Step1.1 | PLANNED | 0% | Blueprint planning | epics/SAMPLE_FEATURE_DEVELOPMENT.mdc |

## üîç EPIC FAST LOOKUP (AI SEARCH ZONE)

### **Active Epics** (0/3 capacity)
*No active epics - full capacity available*

### **Planned Epics** (1 ready for activation)
- **SAMPLE_FEATURE_DEVELOPMENT**: Framework demo epic, 3 phases, 9 steps

### **Completed Epics** (0 archived)
*No completed epics*

### **Epic File Mapping** (AI REFERENCE)
```
SAMPLE_FEATURE_DEVELOPMENT ‚Üí epics/SAMPLE_FEATURE_DEVELOPMENT.mdc
```

## üéØ NATURAL LANGUAGE ROUTING (AI PROCESSING)

### **Epic Keywords ‚Üí File Mapping**
- **"sample"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT
- **"feature development"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT  
- **"demo"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT
- **"framework"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT

### **User Request Patterns**
- **"work on [keyword]"** ‚Üí Route to matching epic file
- **"continue [keyword]"** ‚Üí Route to epic + identify current step/stage
- **"status of [keyword]"** ‚Üí Return current progress from registry table

## üìà PORTFOLIO METRICS (AUTO-UPDATE ZONE)

### **Capacity Status**
- **Active Slots**: 0/3 (100% available)
- **Ready to Activate**: 1 planned epic
- **Total Epics**: 1

### **Progress Summary**
- **Portfolio Progress**: 0% (no active work)
- **Steps Completed**: 0/9 total steps
- **Current Focus**: No active epic

## üîÑ AI UPDATE OPERATIONS

### **Epic Status Change**
```
OPERATION: Update epic status
LOCATION: Registry table row for epic
FIELDS: Status, Current Phase, Current Step, Stage, Progress, Next Action
SYNC: Must match epic file progress table
```

### **Step Advancement**
```
OPERATION: Advance epic step
LOCATION: Registry table Current Step + Stage columns
UPDATE: Phase, Step, Stage, Progress percentage, Next Action
VALIDATION: Verify progress calculation from completed steps
```

### **Epic Activation**
```
OPERATION: Activate planned epic
PRECONDITION: Active epics < 3
UPDATES: Status‚ÜíACTIVE, Stage‚ÜíBLUEPRINT, Current Step‚Üífirst step
PORTFOLIO: Update active count, capacity status
```

### **Epic Completion**
```
OPERATION: Complete active epic
UPDATES: Status‚ÜíCOMPLETED, Progress‚Üí100%
PORTFOLIO: Update completed count, free active slot
LOOKUP: Move from active to completed section
```

## üéØ AI SEARCH ALGORITHMS

### **Epic Discovery Process**
1. **User Input Analysis**: Extract keywords from user request
2. **Keyword Matching**: Search routing table for epic matches
3. **File Routing**: Return epic file path for detailed context
4. **Status Loading**: Read current phase/step/stage from registry

### **Progress Tracking Process**
1. **Epic Identification**: Match user input to epic in registry
2. **Current Status**: Read stage and progress from registry table
3. **Next Action**: Identify current step requirements
4. **Update Coordination**: Sync registry with epic file changes

### **Portfolio Management**
1. **Capacity Check**: Validate active epic count ‚â§ 3
2. **Status Distribution**: Track planned/active/completed counts
3. **Progress Calculation**: Aggregate step completion across epics
4. **Workflow Optimization**: Identify bottlenecks and next priorities

## üîó EPIC FILE INTEGRATION PATTERNS

### **Registry ‚Üí Epic File Sync**
- **Registry Update**: Triggers epic file progress table update
- **Epic File Update**: Triggers registry table sync
- **Bidirectional Sync**: Automatic consistency validation
- **Primary Source**: Epic file for detailed context, registry for fast lookup

### **Step Stage Workflow Integration**
- **BLUEPRINT**: Registry stage = BLUEPRINT, epic step stage checkboxes
- **CONSTRUCT**: Registry stage = CONSTRUCT, epic implementation tracking
- **VALIDATE**: Registry stage = VALIDATE, epic completion verification
- **COMPLETED**: Registry progress = step completion %, advance to next step

## üìã AI OPERATING CHECKLIST

### **Before Epic Work**
- [ ] Check registry table for current epic status
- [ ] Identify current phase/step/stage
- [ ] Verify epic file location and load context
- [ ] Confirm step requirements and acceptance criteria

### **During Epic Work**
- [ ] Update registry table when changing stages
- [ ] Sync epic file progress table with registry
- [ ] Calculate progress percentage from completed steps
- [ ] Update next action based on current work

### **After Epic Updates**
- [ ] Verify registry-epic file consistency
- [ ] Update portfolio metrics if needed
- [ ] Recalculate capacity and progress summaries
- [ ] Prepare next step context if advancing

## üö® AI COMPLIANCE RULES

### **Registry Table Updates** (MANDATORY)
- ‚úÖ Update registry table for every epic status change
- ‚úÖ Sync with epic file progress table simultaneously
- ‚úÖ Validate progress percentage calculations
- ‚úÖ Maintain accurate current phase/step/stage tracking

### **Portfolio Limits** (ENFORCED)
- ‚úÖ Maximum 3 active epics at any time
- ‚úÖ Block epic activation if capacity exceeded
- ‚úÖ Accurate capacity tracking in lookup section
- ‚úÖ Portfolio metrics auto-calculated from registry data

### **File Coordination** (REQUIRED)
- ‚úÖ Epic file creation requires registry entry
- ‚úÖ Registry updates require epic file sync
- ‚úÖ Consistent naming: EPIC_NAME.mdc format
- ‚úÖ Bidirectional synchronization validation

---

**AI OPTIMIZATION**: Database-style lookup with designated update zones
**CONTEXT EFFICIENCY**: Minimal content, maximum information density
**UPDATE ACCURACY**: 100% epic tracking with automated validation
**FRAMEWORK INTEGRATION**: Central coordination for epic-lifecycle-rules.mdc system
# Epic Registry - AI Master Index v3.0

## ü§ñ AI CONTEXT DESCRIPTION
**WHEN TO USE**: Epic discovery, status tracking, progress updates, epic routing, portfolio management
**PRIMARY FUNCTION**: Fast lookup and status coordination for individual epic files
**UPDATE FREQUENCY**: Every epic status/progress change, step advancement, epic activation/completion
**SEARCH PURPOSE**: Route user requests to specific epics, identify current work, track portfolio capacity

## üìä EPIC REGISTRY TABLE (AI UPDATE ZONE)
| Epic Name | Status | Priority | Current Phase | Current Step | Stage | Progress | Next Action | File Location |
|-----------|--------|----------|---------------|--------------|-------|----------|-------------|---------------|
| SAMPLE_FEATURE_DEVELOPMENT | PLANNED | Medium | Phase1 | Step1.1 | PLANNED | 0% | Blueprint planning | epics/SAMPLE_FEATURE_DEVELOPMENT.mdc |

## üîç EPIC FAST LOOKUP (AI SEARCH ZONE)

### **Active Epics** (0/3 capacity)
*No active epics - full capacity available*

### **Planned Epics** (1 ready for activation)
- **SAMPLE_FEATURE_DEVELOPMENT**: Framework demo epic, 3 phases, 9 steps

### **Completed Epics** (0 archived)
*No completed epics*

### **Epic File Mapping** (AI REFERENCE)
```
SAMPLE_FEATURE_DEVELOPMENT ‚Üí epics/SAMPLE_FEATURE_DEVELOPMENT.mdc
```

## üéØ NATURAL LANGUAGE ROUTING (AI PROCESSING)

### **Epic Keywords ‚Üí File Mapping**
- **"sample"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT
- **"feature development"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT  
- **"demo"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT
- **"framework"** ‚Üí SAMPLE_FEATURE_DEVELOPMENT

### **User Request Patterns**
- **"work on [keyword]"** ‚Üí Route to matching epic file
- **"continue [keyword]"** ‚Üí Route to epic + identify current step/stage
- **"status of [keyword]"** ‚Üí Return current progress from registry table

## üìà PORTFOLIO METRICS (AUTO-UPDATE ZONE)

### **Capacity Status**
- **Active Slots**: 0/3 (100% available)
- **Ready to Activate**: 1 planned epic
- **Total Epics**: 1

### **Progress Summary**
- **Portfolio Progress**: 0% (no active work)
- **Steps Completed**: 0/9 total steps
- **Current Focus**: No active epic

## üîÑ AI UPDATE OPERATIONS

### **Epic Status Change**
```
OPERATION: Update epic status
LOCATION: Registry table row for epic
FIELDS: Status, Current Phase, Current Step, Stage, Progress, Next Action
SYNC: Must match epic file progress table
```

### **Step Advancement**
```
OPERATION: Advance epic step
LOCATION: Registry table Current Step + Stage columns
UPDATE: Phase, Step, Stage, Progress percentage, Next Action
VALIDATION: Verify progress calculation from completed steps
```

### **Epic Activation**
```
OPERATION: Activate planned epic
PRECONDITION: Active epics < 3
UPDATES: Status‚ÜíACTIVE, Stage‚ÜíBLUEPRINT, Current Step‚Üífirst step
PORTFOLIO: Update active count, capacity status
```

### **Epic Completion**
```
OPERATION: Complete active epic
UPDATES: Status‚ÜíCOMPLETED, Progress‚Üí100%
PORTFOLIO: Update completed count, free active slot
LOOKUP: Move from active to completed section
```

## üéØ AI SEARCH ALGORITHMS

### **Epic Discovery Process**
1. **User Input Analysis**: Extract keywords from user request
2. **Keyword Matching**: Search routing table for epic matches
3. **File Routing**: Return epic file path for detailed context
4. **Status Loading**: Read current phase/step/stage from registry

### **Progress Tracking Process**
1. **Epic Identification**: Match user input to epic in registry
2. **Current Status**: Read stage and progress from registry table
3. **Next Action**: Identify current step requirements
4. **Update Coordination**: Sync registry with epic file changes

### **Portfolio Management**
1. **Capacity Check**: Validate active epic count ‚â§ 3
2. **Status Distribution**: Track planned/active/completed counts
3. **Progress Calculation**: Aggregate step completion across epics
4. **Workflow Optimization**: Identify bottlenecks and next priorities

## üîó EPIC FILE INTEGRATION PATTERNS

### **Registry ‚Üí Epic File Sync**
- **Registry Update**: Triggers epic file progress table update
- **Epic File Update**: Triggers registry table sync
- **Bidirectional Sync**: Automatic consistency validation
- **Primary Source**: Epic file for detailed context, registry for fast lookup

### **Step Stage Workflow Integration**
- **BLUEPRINT**: Registry stage = BLUEPRINT, epic step stage checkboxes
- **CONSTRUCT**: Registry stage = CONSTRUCT, epic implementation tracking
- **VALIDATE**: Registry stage = VALIDATE, epic completion verification
- **COMPLETED**: Registry progress = step completion %, advance to next step

## üìã AI OPERATING CHECKLIST

### **Before Epic Work**
- [ ] Check registry table for current epic status
- [ ] Identify current phase/step/stage
- [ ] Verify epic file location and load context
- [ ] Confirm step requirements and acceptance criteria

### **During Epic Work**
- [ ] Update registry table when changing stages
- [ ] Sync epic file progress table with registry
- [ ] Calculate progress percentage from completed steps
- [ ] Update next action based on current work

### **After Epic Updates**
- [ ] Verify registry-epic file consistency
- [ ] Update portfolio metrics if needed
- [ ] Recalculate capacity and progress summaries
- [ ] Prepare next step context if advancing

## üö® AI COMPLIANCE RULES

### **Registry Table Updates** (MANDATORY)
- ‚úÖ Update registry table for every epic status change
- ‚úÖ Sync with epic file progress table simultaneously
- ‚úÖ Validate progress percentage calculations
- ‚úÖ Maintain accurate current phase/step/stage tracking

### **Portfolio Limits** (ENFORCED)
- ‚úÖ Maximum 3 active epics at any time
- ‚úÖ Block epic activation if capacity exceeded
- ‚úÖ Accurate capacity tracking in lookup section
- ‚úÖ Portfolio metrics auto-calculated from registry data

### **File Coordination** (REQUIRED)
- ‚úÖ Epic file creation requires registry entry
- ‚úÖ Registry updates require epic file sync
- ‚úÖ Consistent naming: EPIC_NAME.mdc format
- ‚úÖ Bidirectional synchronization validation

---

**AI OPTIMIZATION**: Database-style lookup with designated update zones
**CONTEXT EFFICIENCY**: Minimal content, maximum information density
**UPDATE ACCURACY**: 100% epic tracking with automated validation
**FRAMEWORK INTEGRATION**: Central coordination for epic-lifecycle-rules.mdc system
